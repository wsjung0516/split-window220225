{
    "pipes": [],
    "interfaces": [
        {
            "name": "ImageModel",
            "id": "interface-ImageModel-e37085d0381e922e0800d878d1a614ffeca2782ea7c1514ade45c395d178d8120b64ddc88677205357dc9efa619d48a1d1347784790b4ee1c086ca7b97e58cc0",
            "file": "src/app/models/data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export function data(): string {\n  return 'data';\n}\nexport interface ImageModel {\n  imageId: number,\n  category: string,\n  url: string,\n  blob: any,\n  title: string\n}\nexport interface SeriesModel {\n  seriesId: number;\n  url: string;\n  blob: string;\n  category: string\n}\n",
            "properties": [
                {
                    "name": "blob",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "imageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ISelectedGridTemplate",
            "id": "interface-ISelectedGridTemplate-f2eb4d768985e43234198dda23572d2ab7de3039ab6d3eee2be3a1deca4895fb433d34039ea3cf98a9286885769ca68af757aeefe00c420740ee681251e7c7c2",
            "file": "src/state/status/status.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { State, Action, Selector, StateContext } from '@ngxs/store';\r\nimport {\r\n  SelectedGridTemplate,\r\n  SetActiveSplit, SetCategoryList,\r\n  SetCurrentCategory, SetCurrentSplitOperation, SetFocusedSplit,\r\n  SetImageUrls,\r\n  SetIsImageLoaded,\r\n  SetIsSeriesLoaded,\r\n  SetSelectedImageById,\r\n  SetSelectedImageByUrl,\r\n  SetSelectedSeriesById,\r\n  SetSelectedSplitWindowId, SetSeriesUrls, SetSplitAction,\r\n  SetSplitMode,\r\n  SetSplitCategory, SetWebworkerWorkingStatus,\r\n  StatusAction\r\n} from './status.actions';\r\nimport {Injectable} from \"@angular/core\";\r\nimport {ImageModel} from \"../../app/models/data\";\r\nexport interface ISelectedGridTemplate {\r\n  templateName: string,\r\n  button: 'left' | 'right'\r\n}\r\nexport interface StatusStateModel {\r\n  selectedGridTemplate: ISelectedGridTemplate;\r\n  items: string[];\r\n  isImageLoaded: {} ; // from 0\r\n  isSeriesLoaded: boolean;\r\n  imageUrls: string[]; //\r\n  seriesUrls: string[]; //\r\n  currentCategory: string;\r\n  category_list: string[];\r\n  focusedSplit: number;\r\n  selectedImageId: ImageModel;\r\n  selectedImageUrl: string;\r\n  splitMode: number;\r\n  splitCategory: string[];\r\n  splitAction: boolean;\r\n  selectedSeriesById: number;\r\n  selectedSplitWindowId: string;\r\n  webworkerWorkingStatus: boolean;\r\n  currentSplitOperation: {},\r\n  activeSplit: number\r\n}\r\n\r\n@State<StatusStateModel>({\r\n  name: 'status',\r\n  defaults: {\r\n    selectedGridTemplate: {templateName: '', button: 'left'},\r\n    items: [],\r\n    isImageLoaded: { idx: 0},\r\n    isSeriesLoaded: false,\r\n    imageUrls: [],\r\n    seriesUrls: [],\r\n    currentCategory: '',\r\n    //category_list:['animal', 'house', 'baby','forest', 'happiness', 'love','sea','banana' ],\r\n    category_list:['animal', 'house', 'baby', 'forest', 'happiness', 'love', 'sea','banana', 'mountain'],\r\n    focusedSplit: 0, // 0: split1, 1: split2, 2: split3, 3: split4\r\n    selectedImageId: {\r\n      imageId: 0,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: '',\r\n      title: ''\r\n    },\r\n    selectedImageUrl: '',\r\n    splitMode: 1, // 1: active --> split1, 2: active --> split1, split2\r\n    splitCategory: ['animal', 'house', 'baby', 'forest'],\r\n    splitAction: false,\r\n    selectedSeriesById: 0,\r\n    selectedSplitWindowId: 'element1',\r\n    webworkerWorkingStatus: false,\r\n    currentSplitOperation: {\r\n      element: ''\r\n    },\r\n    activeSplit: 0\r\n  }\r\n})\r\n@Injectable()\r\nexport class StatusState {\r\n\r\n  @Selector()\r\n  public static getSelectedGridTemplate(state: StatusStateModel) {\r\n    return state.selectedGridTemplate;\r\n  }\r\n  @Selector()\r\n  public static getState(state: StatusStateModel) {\r\n    return state;\r\n  }\r\n  @Selector()\r\n  public static getIsImageLoaded(state: StatusStateModel) {\r\n    return state.isImageLoaded;\r\n  }\r\n  @Selector()\r\n  public static getIsSeriesLoaded(state: StatusStateModel) {\r\n    return state.isSeriesLoaded;\r\n  }\r\n  @Selector()\r\n  public static getImageUrls(state: StatusStateModel) {\r\n    return state.imageUrls;\r\n  }\r\n  @Selector()\r\n  public static getSeriesUrls(state: StatusStateModel) {\r\n    return state.seriesUrls;\r\n  }\r\n  @Selector()\r\n  public static getCurrentCategory(state: StatusStateModel) {\r\n    return state.currentCategory;\r\n  }\r\n  @Selector()\r\n  public static getCategoryList(state: StatusStateModel) {\r\n    return state.category_list;\r\n  }\r\n  @Selector()\r\n  public static getFocusedSplit(state: StatusStateModel) {\r\n    return state.focusedSplit;\r\n  }\r\n  @Selector()\r\n  public static getSelectedImageById(state: StatusStateModel) {\r\n    return state.selectedImageId;\r\n  }\r\n  @Selector()\r\n  public static getSelectedImageByUrl(state: StatusStateModel) {\r\n    return state.selectedImageUrl;\r\n  }\r\n  @Selector()\r\n  public static getSplitMode(state: StatusStateModel) {\r\n    return state.splitMode;\r\n  }\r\n  @Selector()\r\n  public static getSplitCategories(state: StatusStateModel) {\r\n    return state.splitCategory;\r\n  }\r\n  @Selector()\r\n  public static getSplitAction(state: StatusStateModel) {\r\n    return state.splitAction;\r\n  }\r\n  @Selector()\r\n  public static getSelectedSeriesById(state: StatusStateModel) {\r\n    return state.selectedSeriesById;\r\n  }\r\n  @Selector()\r\n  public static getSelectedSplitWindowId(state: StatusStateModel) {\r\n    return state.selectedSplitWindowId;\r\n  }\r\n  @Selector()\r\n  public static getWebworkerWorkingStatus(state: StatusStateModel) {\r\n    return state.webworkerWorkingStatus;\r\n  }\r\n  @Selector()\r\n  public static getCurrentSplitOperation(state: StatusStateModel) {\r\n    return state.currentSplitOperation;\r\n  }\r\n  @Selector()\r\n  public static getActiveSplit(state: StatusStateModel) {\r\n    return state.activeSplit;\r\n  }\r\n\r\n  @Action(SelectedGridTemplate)\r\n  public selectedGridTemplate({patchState, getState}: StateContext<StatusStateModel>, { payload }: SelectedGridTemplate) {\r\n    const obj = getState().selectedGridTemplate;\r\n    // console.log(' payload', payload)\r\n    patchState({selectedGridTemplate: {...obj, ...payload}});\r\n  }\r\n  @Action(StatusAction)\r\n  public add(ctx: StateContext<StatusStateModel>, { payload }: StatusAction) {\r\n    const stateModel = ctx.getState();\r\n    stateModel.items = [...stateModel.items, payload];\r\n    ctx.setState(stateModel);\r\n  }\r\n  @Action(SetIsImageLoaded)\r\n  public setIsImageLoaded({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetIsImageLoaded) {\r\n    const obj = getState().isImageLoaded;\r\n    patchState({isImageLoaded: {...obj, ...payload}})\r\n  }\r\n  @Action(SetIsSeriesLoaded)\r\n  public setIsSeriesLoaded({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetIsSeriesLoaded) {\r\n    patchState({isSeriesLoaded: payload})\r\n  }\r\n  @Action(SetImageUrls)\r\n  public setImageUrls({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetImageUrls) {\r\n    let urls = getState().imageUrls;\r\n    patchState({imageUrls: [...urls, ...payload]});\r\n  }\r\n  @Action(SetSeriesUrls)\r\n  public setSeriesUrls({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSeriesUrls) {\r\n    let urls = getState().seriesUrls;\r\n    patchState({seriesUrls: [...urls, ...payload]});\r\n  }\r\n  @Action(SetCurrentCategory)\r\n  public setCurrentCategory({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetCurrentCategory) {\r\n    patchState({currentCategory: payload})\r\n  }\r\n  @Action(SetCategoryList)\r\n  public setCategoryList({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetCategoryList) {\r\n    patchState({category_list: payload})\r\n  }\r\n  @Action(SetFocusedSplit)\r\n  public setFocusedSplit({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetFocusedSplit) {\r\n    patchState({focusedSplit: payload})\r\n  }\r\n  @Action(SetSelectedImageById)\r\n  public setSelectedImageById({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSelectedImageById) {\r\n    const imageId = getState().selectedImageId;\r\n    patchState({selectedImageId: {...imageId, ...payload}})\r\n  }\r\n  @Action(SetSelectedImageByUrl)\r\n  public setSelectedImageByUrl({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSelectedImageByUrl) {\r\n    patchState({selectedImageUrl: payload})\r\n  }\r\n  @Action(SetSplitMode)\r\n  public setSplitMode({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSplitMode) {\r\n    patchState({splitMode: payload})\r\n  }\r\n  @Action(SetSplitCategory)\r\n  public setSplitCategory({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSplitCategory) {\r\n    const state = getState().splitCategory;\r\n    const idx = payload.idx;\r\n    const category = payload.category\r\n    state[idx] = category\r\n    patchState({splitCategory: [...state]})\r\n  }\r\n  @Action(SetSplitAction)\r\n  public setSplitAction({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSplitAction) {\r\n    patchState({splitAction: payload})\r\n  }\r\n  @Action(SetSelectedSeriesById)\r\n  public setSelectedSeriesById({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSelectedSeriesById) {\r\n    patchState({selectedSeriesById: payload})\r\n  }\r\n  @Action(SetSelectedSplitWindowId)\r\n  public setSelectedSplitWindowId({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSelectedSplitWindowId) {\r\n    patchState({selectedSplitWindowId: payload})\r\n  }\r\n  @Action(SetWebworkerWorkingStatus)\r\n  public setWebworkerWorkingStatus({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetWebworkerWorkingStatus) {\r\n    patchState({webworkerWorkingStatus: payload})\r\n  }\r\n  @Action(SetCurrentSplitOperation)\r\n  public setCurrentSplitOperation({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetCurrentSplitOperation) {\r\n    const obj = getState().currentSplitOperation;\r\n    patchState({currentSplitOperation: { ...obj, ...payload }})\r\n  }\r\n  @Action(SetActiveSplit)\r\n  public setActiveSplit({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetActiveSplit) {\r\n    patchState({activeSplit: payload})\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"left\" | \"right\"",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "templateName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SeriesModel",
            "id": "interface-SeriesModel-e37085d0381e922e0800d878d1a614ffeca2782ea7c1514ade45c395d178d8120b64ddc88677205357dc9efa619d48a1d1347784790b4ee1c086ca7b97e58cc0",
            "file": "src/app/models/data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export function data(): string {\n  return 'data';\n}\nexport interface ImageModel {\n  imageId: number,\n  category: string,\n  url: string,\n  blob: any,\n  title: string\n}\nexport interface SeriesModel {\n  seriesId: number;\n  url: string;\n  blob: string;\n  category: string\n}\n",
            "properties": [
                {
                    "name": "blob",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "seriesId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StatusStateModel",
            "id": "interface-StatusStateModel-f2eb4d768985e43234198dda23572d2ab7de3039ab6d3eee2be3a1deca4895fb433d34039ea3cf98a9286885769ca68af757aeefe00c420740ee681251e7c7c2",
            "file": "src/state/status/status.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { State, Action, Selector, StateContext } from '@ngxs/store';\r\nimport {\r\n  SelectedGridTemplate,\r\n  SetActiveSplit, SetCategoryList,\r\n  SetCurrentCategory, SetCurrentSplitOperation, SetFocusedSplit,\r\n  SetImageUrls,\r\n  SetIsImageLoaded,\r\n  SetIsSeriesLoaded,\r\n  SetSelectedImageById,\r\n  SetSelectedImageByUrl,\r\n  SetSelectedSeriesById,\r\n  SetSelectedSplitWindowId, SetSeriesUrls, SetSplitAction,\r\n  SetSplitMode,\r\n  SetSplitCategory, SetWebworkerWorkingStatus,\r\n  StatusAction\r\n} from './status.actions';\r\nimport {Injectable} from \"@angular/core\";\r\nimport {ImageModel} from \"../../app/models/data\";\r\nexport interface ISelectedGridTemplate {\r\n  templateName: string,\r\n  button: 'left' | 'right'\r\n}\r\nexport interface StatusStateModel {\r\n  selectedGridTemplate: ISelectedGridTemplate;\r\n  items: string[];\r\n  isImageLoaded: {} ; // from 0\r\n  isSeriesLoaded: boolean;\r\n  imageUrls: string[]; //\r\n  seriesUrls: string[]; //\r\n  currentCategory: string;\r\n  category_list: string[];\r\n  focusedSplit: number;\r\n  selectedImageId: ImageModel;\r\n  selectedImageUrl: string;\r\n  splitMode: number;\r\n  splitCategory: string[];\r\n  splitAction: boolean;\r\n  selectedSeriesById: number;\r\n  selectedSplitWindowId: string;\r\n  webworkerWorkingStatus: boolean;\r\n  currentSplitOperation: {},\r\n  activeSplit: number\r\n}\r\n\r\n@State<StatusStateModel>({\r\n  name: 'status',\r\n  defaults: {\r\n    selectedGridTemplate: {templateName: '', button: 'left'},\r\n    items: [],\r\n    isImageLoaded: { idx: 0},\r\n    isSeriesLoaded: false,\r\n    imageUrls: [],\r\n    seriesUrls: [],\r\n    currentCategory: '',\r\n    //category_list:['animal', 'house', 'baby','forest', 'happiness', 'love','sea','banana' ],\r\n    category_list:['animal', 'house', 'baby', 'forest', 'happiness', 'love', 'sea','banana', 'mountain'],\r\n    focusedSplit: 0, // 0: split1, 1: split2, 2: split3, 3: split4\r\n    selectedImageId: {\r\n      imageId: 0,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: '',\r\n      title: ''\r\n    },\r\n    selectedImageUrl: '',\r\n    splitMode: 1, // 1: active --> split1, 2: active --> split1, split2\r\n    splitCategory: ['animal', 'house', 'baby', 'forest'],\r\n    splitAction: false,\r\n    selectedSeriesById: 0,\r\n    selectedSplitWindowId: 'element1',\r\n    webworkerWorkingStatus: false,\r\n    currentSplitOperation: {\r\n      element: ''\r\n    },\r\n    activeSplit: 0\r\n  }\r\n})\r\n@Injectable()\r\nexport class StatusState {\r\n\r\n  @Selector()\r\n  public static getSelectedGridTemplate(state: StatusStateModel) {\r\n    return state.selectedGridTemplate;\r\n  }\r\n  @Selector()\r\n  public static getState(state: StatusStateModel) {\r\n    return state;\r\n  }\r\n  @Selector()\r\n  public static getIsImageLoaded(state: StatusStateModel) {\r\n    return state.isImageLoaded;\r\n  }\r\n  @Selector()\r\n  public static getIsSeriesLoaded(state: StatusStateModel) {\r\n    return state.isSeriesLoaded;\r\n  }\r\n  @Selector()\r\n  public static getImageUrls(state: StatusStateModel) {\r\n    return state.imageUrls;\r\n  }\r\n  @Selector()\r\n  public static getSeriesUrls(state: StatusStateModel) {\r\n    return state.seriesUrls;\r\n  }\r\n  @Selector()\r\n  public static getCurrentCategory(state: StatusStateModel) {\r\n    return state.currentCategory;\r\n  }\r\n  @Selector()\r\n  public static getCategoryList(state: StatusStateModel) {\r\n    return state.category_list;\r\n  }\r\n  @Selector()\r\n  public static getFocusedSplit(state: StatusStateModel) {\r\n    return state.focusedSplit;\r\n  }\r\n  @Selector()\r\n  public static getSelectedImageById(state: StatusStateModel) {\r\n    return state.selectedImageId;\r\n  }\r\n  @Selector()\r\n  public static getSelectedImageByUrl(state: StatusStateModel) {\r\n    return state.selectedImageUrl;\r\n  }\r\n  @Selector()\r\n  public static getSplitMode(state: StatusStateModel) {\r\n    return state.splitMode;\r\n  }\r\n  @Selector()\r\n  public static getSplitCategories(state: StatusStateModel) {\r\n    return state.splitCategory;\r\n  }\r\n  @Selector()\r\n  public static getSplitAction(state: StatusStateModel) {\r\n    return state.splitAction;\r\n  }\r\n  @Selector()\r\n  public static getSelectedSeriesById(state: StatusStateModel) {\r\n    return state.selectedSeriesById;\r\n  }\r\n  @Selector()\r\n  public static getSelectedSplitWindowId(state: StatusStateModel) {\r\n    return state.selectedSplitWindowId;\r\n  }\r\n  @Selector()\r\n  public static getWebworkerWorkingStatus(state: StatusStateModel) {\r\n    return state.webworkerWorkingStatus;\r\n  }\r\n  @Selector()\r\n  public static getCurrentSplitOperation(state: StatusStateModel) {\r\n    return state.currentSplitOperation;\r\n  }\r\n  @Selector()\r\n  public static getActiveSplit(state: StatusStateModel) {\r\n    return state.activeSplit;\r\n  }\r\n\r\n  @Action(SelectedGridTemplate)\r\n  public selectedGridTemplate({patchState, getState}: StateContext<StatusStateModel>, { payload }: SelectedGridTemplate) {\r\n    const obj = getState().selectedGridTemplate;\r\n    // console.log(' payload', payload)\r\n    patchState({selectedGridTemplate: {...obj, ...payload}});\r\n  }\r\n  @Action(StatusAction)\r\n  public add(ctx: StateContext<StatusStateModel>, { payload }: StatusAction) {\r\n    const stateModel = ctx.getState();\r\n    stateModel.items = [...stateModel.items, payload];\r\n    ctx.setState(stateModel);\r\n  }\r\n  @Action(SetIsImageLoaded)\r\n  public setIsImageLoaded({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetIsImageLoaded) {\r\n    const obj = getState().isImageLoaded;\r\n    patchState({isImageLoaded: {...obj, ...payload}})\r\n  }\r\n  @Action(SetIsSeriesLoaded)\r\n  public setIsSeriesLoaded({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetIsSeriesLoaded) {\r\n    patchState({isSeriesLoaded: payload})\r\n  }\r\n  @Action(SetImageUrls)\r\n  public setImageUrls({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetImageUrls) {\r\n    let urls = getState().imageUrls;\r\n    patchState({imageUrls: [...urls, ...payload]});\r\n  }\r\n  @Action(SetSeriesUrls)\r\n  public setSeriesUrls({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSeriesUrls) {\r\n    let urls = getState().seriesUrls;\r\n    patchState({seriesUrls: [...urls, ...payload]});\r\n  }\r\n  @Action(SetCurrentCategory)\r\n  public setCurrentCategory({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetCurrentCategory) {\r\n    patchState({currentCategory: payload})\r\n  }\r\n  @Action(SetCategoryList)\r\n  public setCategoryList({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetCategoryList) {\r\n    patchState({category_list: payload})\r\n  }\r\n  @Action(SetFocusedSplit)\r\n  public setFocusedSplit({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetFocusedSplit) {\r\n    patchState({focusedSplit: payload})\r\n  }\r\n  @Action(SetSelectedImageById)\r\n  public setSelectedImageById({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSelectedImageById) {\r\n    const imageId = getState().selectedImageId;\r\n    patchState({selectedImageId: {...imageId, ...payload}})\r\n  }\r\n  @Action(SetSelectedImageByUrl)\r\n  public setSelectedImageByUrl({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSelectedImageByUrl) {\r\n    patchState({selectedImageUrl: payload})\r\n  }\r\n  @Action(SetSplitMode)\r\n  public setSplitMode({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSplitMode) {\r\n    patchState({splitMode: payload})\r\n  }\r\n  @Action(SetSplitCategory)\r\n  public setSplitCategory({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSplitCategory) {\r\n    const state = getState().splitCategory;\r\n    const idx = payload.idx;\r\n    const category = payload.category\r\n    state[idx] = category\r\n    patchState({splitCategory: [...state]})\r\n  }\r\n  @Action(SetSplitAction)\r\n  public setSplitAction({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSplitAction) {\r\n    patchState({splitAction: payload})\r\n  }\r\n  @Action(SetSelectedSeriesById)\r\n  public setSelectedSeriesById({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSelectedSeriesById) {\r\n    patchState({selectedSeriesById: payload})\r\n  }\r\n  @Action(SetSelectedSplitWindowId)\r\n  public setSelectedSplitWindowId({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSelectedSplitWindowId) {\r\n    patchState({selectedSplitWindowId: payload})\r\n  }\r\n  @Action(SetWebworkerWorkingStatus)\r\n  public setWebworkerWorkingStatus({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetWebworkerWorkingStatus) {\r\n    patchState({webworkerWorkingStatus: payload})\r\n  }\r\n  @Action(SetCurrentSplitOperation)\r\n  public setCurrentSplitOperation({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetCurrentSplitOperation) {\r\n    const obj = getState().currentSplitOperation;\r\n    patchState({currentSplitOperation: { ...obj, ...payload }})\r\n  }\r\n  @Action(SetActiveSplit)\r\n  public setActiveSplit({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetActiveSplit) {\r\n    patchState({activeSplit: payload})\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "activeSplit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "category_list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "currentCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "currentSplitOperation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "focusedSplit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "imageUrls",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "isImageLoaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isSeriesLoaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selectedGridTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISelectedGridTemplate",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "selectedImageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ImageModel",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "selectedImageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "selectedSeriesById",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "selectedSplitWindowId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "seriesUrls",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "splitAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "splitCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "splitMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "webworkerWorkingStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Tile",
            "id": "interface-Tile-bac05689454d7348d01a8b823fba05b023c17b58a08720bc8650fe93afcf7d49a480e3ee0df343fff8ef066282bc3893743b6256517570c7685eca6c1dcfcae8",
            "file": "src/app/components/grid/display-grid/display-grid.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy, ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output, SimpleChanges\r\n} from \"@angular/core\";\r\n\r\nexport interface Tile {\r\n  mcols: number;\r\n  mheight: string;\r\n  mwidth: string;\r\n  cols: number;\r\n  rows: number;\r\n  templateName: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'display-grid',\r\n  template: `\r\n    <div>\r\n      <mat-grid-list cols=\"{{mcols}}\" rowHeight=\"{{mheight}}\" >\r\n        <mat-grid-tile\r\n          *ngFor=\"let tile of tiles\"\r\n          [colspan]=\"tile.cols\"\r\n          [rowspan]=\"tile.rows\"\r\n        >\r\n          <div\r\n               [selectColor]=\"tile.templateName\"\r\n               [selectedTemplate]=\"selectedTemplate\"\r\n               (selectTemplate) = \"clickSelectTemplate($event)\"\r\n                style=\"width: 100%; height: 100%\">\r\n            <display-grid-template [templateName]=\"tile.templateName\"\r\n                                   [templateHeight]=\"tile.mheight\"\r\n                                   [selectedTemplate]=\"selectedTemplate\">\r\n            </display-grid-template>\r\n          </div>\r\n        </mat-grid-tile>\r\n      </mat-grid-list>\r\n    </div>\r\n  `,\r\n  styles: [\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DisplayGridComponent {\r\n  @Output() selectTpl = new EventEmitter<any>();\r\n  @Input() set splitMode ( val: number) {\r\n    if (val === 1) {\r\n      this.tiles = [...this.tiles1];\r\n    } else if (val === 2) {\r\n      this.tiles = [...this.tiles2];\r\n    } else if( val === 3) {\r\n      this.tiles = [...this.tiles3];\r\n    } else if( val === 4)  {\r\n      this.tiles = [...this.tiles4];\r\n    }\r\n    this.mcols = this.tiles[this.tiles.length - 1].mcols;\r\n    this.mheight = this.tiles[this.tiles.length - 1].mheight;\r\n    // this.store.dispatch(new SetSplitAction(true));\r\n    this.cdr.detectChanges();\r\n  }\r\n  mcols = 1;\r\n  mheight = '82vh';\r\n  tiles1: Tile[] = [\r\n    {mcols: 1, mheight: '82vh', mwidth: '100%', cols: 1, rows: 1, templateName: 'element1'},\r\n  ];\r\n  tiles2: Tile[] = [\r\n    {mcols: 2, mheight: '82vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element1'},\r\n    {mcols: 2, mheight: '82vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element2'},\r\n  ];\r\n  tiles3: Tile[] = [\r\n    {mcols: 2, mheight: '82vh', mwidth: '50%', cols: 1, rows: 2, templateName: 'element1'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element2'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element3'},\r\n  ];\r\n  tiles4: Tile[] = [\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element1'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element2'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element3'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element4'},\r\n  ];\r\n  tiles: Tile[] = [...this.tiles1];\r\n\r\n  selectedTemplate: string = this.tiles[0].templateName;\r\n\r\n  constructor( private cdr: ChangeDetectorRef) {\r\n  }\r\n\r\n  clickSelectTemplate(ev?: any) {\r\n    this.selectedTemplate = ev;\r\n    let idx;\r\n    if( ev === 'element1' ) idx = 0;\r\n    if( ev === 'element2' ) idx = 1;\r\n    if( ev === 'element3' ) idx = 2;\r\n    if( ev === 'element4' ) idx = 3;\r\n    this.selectTpl.emit({element: ev, idx});\r\n    // this.store.dispatch(new SetFocusedSplit(idx));\r\n    // this.store.dispatch(new SetSplitAction(false));\r\n    //\r\n    // this.carouselService.getNextImage(this.currentCategory, this.splitService.selectedElement);\r\n    // this.splitService.selectedElement = ev;\r\n\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "mcols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "mheight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "mwidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "templateName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "CacheSeriesService",
            "id": "injectable-CacheSeriesService-87dca8ac1fbf9925d903021fd2fc8f6b279aaea557c7c93fc51bb06009c3f9d40d3cf99136909dc7500f4298112365e3b7c8586d1a72a7e240085cdbbb2d692f",
            "file": "src/app/services/cashe-series.service.ts",
            "properties": [
                {
                    "name": "_cachedSeries",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SeriesModel[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_cacheUrls",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "category_list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getCategoryList"
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkAndCacheSeries",
                    "args": [
                        {
                            "name": "data",
                            "type": "SeriesModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SeriesModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCachedSeriesByCat",
                    "args": [
                        {
                            "name": "cat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCachedSeriesByUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCacheUrls",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTotalSeriesList",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isThisUrlCached",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readFile",
                    "args": [
                        {
                            "name": "blob",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "blob",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {SelectSnapshot} from \"@ngxs-labs/select-snapshot\";\nimport {StatusState} from \"../../state/status/status.state\";\nimport {SeriesModel} from \"../models/data\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CacheSeriesService {\n\n  private _cacheUrls: {\n    idx: number,\n    category: string,\n    url: string\n  }[] = [];\n  private _cachedSeries: SeriesModel[] =[];\n  @SelectSnapshot(StatusState.getCategoryList) category_list: string[] | undefined;\n  constructor(private http: HttpClient) { }\n\n  isThisUrlCached(url: string) {\n    return this._cacheUrls.find(val => val.url === url);\n  }\n  getCachedSeriesByCat(cat: string) { // data: SeriesModel\n    return  this._cachedSeries.filter(val => val.category === cat)[0];\n  }\n\n  getCacheUrls() {\n    return this._cacheUrls;\n  }\n\n  // @ts-ignore\n  get cachedSeries(): SeriesModel[] {\n    return this._cachedSeries;\n  }\n  getTotalSeriesList(url: string) {\n    return this.http.get(url).pipe(\n      map ( (res:any) => res['data']),\n    )\n  }\n\n  getCachedSeriesByUrl(url: string) {\n    return this._cachedSeries.filter(series => series.url === url)[0];\n  }\n\n  checkAndCacheSeries(data: SeriesModel) {\n    this._cachedSeries.push(data);\n  }\n  readFile (blob: any): Observable<string>  {\n    return new Observable((obs: any) => {\n      const reader = new FileReader();\n\n      reader.onerror = err => obs.error(err);\n      reader.onabort = err => obs.error(err);\n      reader.onload = () => obs.next(reader.result);\n      reader.onloadend = () => obs.complete();\n\n      return reader.readAsDataURL(blob);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "cachedSeries": {
                    "name": "cachedSeries",
                    "getSignature": {
                        "name": "cachedSeries",
                        "type": "[]",
                        "returnType": "SeriesModel[]",
                        "line": 35
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "CarouselService",
            "id": "injectable-CarouselService-28a205475f9d2e667ae89bf808654497ed4142b82f9060f2b71093c5fa02f0124ab9e5710633f7b5d2b7187c5cd4f4a5aa6a556dbd929c1b6656893c652fbddf",
            "file": "src/app/services/carousel.service.ts",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getCurrentCategory"
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getNextImage",
                    "args": [
                        {
                            "name": "cat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPrevImage",
                    "args": [
                        {
                            "name": "cat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedImageById",
                    "args": [
                        {
                            "name": "cat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedImageByUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {ImageService} from \"./image.service\";\r\nimport {Store} from \"@ngxs/store\";\r\n// import {SetSelectedImageById} from \"../../store/status/status.actions\";\r\nimport {SelectSnapshot} from \"@ngxs-labs/select-snapshot\";\r\nimport {StatusState} from \"../../state/status/status.state\";\r\nimport {SplitService} from \"./split.service\";\r\nimport {SetSelectedImageById} from \"../../state/status/status.actions\";\r\nimport {ImageModel} from \"../models/data\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CarouselService {\r\n  // @Select(StatusState.getSelectedImageById) getSelectedImageById$: Observable<number>;\r\n  @SelectSnapshot(StatusState.getCurrentCategory) category: string;\r\n  constructor(\r\n    private imageService: ImageService,\r\n    private splitService: SplitService,\r\n    private store: Store\r\n    ) {}\r\n  getNextImage(cat: string, element: any) {\r\n    if( this.imageService.getCacheUrlsByCategory(cat).length > this.splitService.currentImageIndex[cat] + 1) {\r\n      this.splitService.currentImageIndex[cat] = this.splitService.currentImageIndex[cat] + 1;\r\n    }\r\n    // if( this.imageService.getCacheUrlsByCategory(cat).length > this.splitService.currentImageIndex[element] + 1) {\r\n    //   this.splitService.currentImageIndex[element] = this.splitService.currentImageIndex[element] + 1;\r\n    // }\r\n    const image: ImageModel = {\r\n      imageId: this.splitService.currentImageIndex[cat],\r\n      // imageId: this.splitService.currentImageIndex[element],\r\n      category: cat,\r\n      url: '',\r\n      blob: '',\r\n      title: ''\r\n    }\r\n    /**\r\n     * new SetSelectedImageById --> getSelectedImageById(carousel-main.compoment)\r\n     * new SetSelectedSplitWindow(carousel-main.component displayFirstImage)\r\n     * --> onSelectTemplate (grid component)\r\n     * */\r\n\r\n    this.store.dispatch(new SetSelectedImageById(image));\r\n    //\r\n    return this.imageService.getCacheImage(cat, this.splitService.currentImageIndex[cat]);\r\n    // return this.imageService.getCacheImage(cat, this.splitService.currentImageIndex[element]);\r\n    //\r\n  }\r\n  getPrevImage(cat: string, element: any) {\r\n    if( this.splitService.currentImageIndex[cat] > 0) {\r\n      this.splitService.currentImageIndex[cat] = this.splitService.currentImageIndex[cat] - 1;\r\n    }\r\n    // if( this.splitService.currentImageIndex[element] > 0) {\r\n    //   this.splitService.currentImageIndex[element] = this.splitService.currentImageIndex[element] - 1;\r\n    // }\r\n    // console.log('-- prev this.currentImageIndex', this.currentImageIndex )\r\n    const image: ImageModel = {\r\n      imageId: this.splitService.currentImageIndex[cat],\r\n      // imageId: this.splitService.currentImageIndex[element],\r\n      category: cat,\r\n      url: '',\r\n      blob: '',\r\n      title: ''\r\n    }\r\n\r\n    this.store.dispatch(new SetSelectedImageById(image));\r\n    return this.imageService.getCacheImage(this.category, this.splitService.currentImageIndex[cat]);\r\n    // return this.imageService.getCacheImage(this.category, this.splitService.currentImageIndex[element]);\r\n  }\r\n  getSelectedImageByUrl(url: string, element: any) {\r\n    // return this.imageService.getCacheImage(this.category, this.splitService.currentImageIndex[element])\r\n    // return this.imageService.getCacheImage(this.category, this.splitService.currentImageIndex[element])\r\n  }\r\n  getSelectedImageById(cat: string, idx: number) {\r\n    return this.imageService.getCacheImage(cat, idx)\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "imageService",
                        "type": "ImageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "splitService",
                        "type": "SplitService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "imageService",
                        "type": "ImageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "splitService",
                        "type": "SplitService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CustomVirtualScrollStrategy",
            "id": "injectable-CustomVirtualScrollStrategy-0c4141b5b7b90f317f3530bd3c011987d723406bbf15cbef7be205f2e5d83ec875c2562cfd0ce230c790e2ac9cae18df27f62da7ffca238309afc064961d690d",
            "file": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, EventEmitter,\n  Injectable,\n  Input, OnDestroy,\n  OnInit, Output,\n  ViewChild\n} from '@angular/core';\nimport {\n  CdkVirtualScrollViewport,\n  FixedSizeVirtualScrollStrategy,\n  VIRTUAL_SCROLL_STRATEGY\n} from \"@angular/cdk/scrolling\";\nimport {Select} from \"@ngxs/store\";\nimport {StatusState} from \"../../../../state/status/status.state\";\n\nimport {Observable, Subject} from \"rxjs\";\nimport {ImageModel} from \"../../../models/data\";\nimport {take, takeUntil} from \"rxjs/operators\";\n@Injectable()\nexport class CustomVirtualScrollStrategy extends FixedSizeVirtualScrollStrategy {\n  constructor() {\n    /** Below value is assumed, that could contain at most 100 image pixel data at one time.\n     * If less than this value, the image data tend to be shuffled by sharing memory usage while scrolling  */\n    super(90, 10000, 10000); // (itemSize, minBufferPx, maxBufferPx)\n  }\n}\n\n@Component({\n  selector: 'thumbnail-list',\n  template: `\n    <div class=\"mt-1\">\n      <div class=\"cdk-scroll-source\" style=\"width: 99%\">\n        <cdk-virtual-scroll-viewport\n          class=\"cdk-scroll-viewport\"\n          orientation=\"horizontal\" >\n          <ng-container *cdkVirtualFor=\"let item of _currentImages\">\n            <thumbnail-item [originalImage]=\"item\"\n                            [addClass]=\"addClass\"\n                            (selected) = onSelectItem($event)>\n            </thumbnail-item>\n          </ng-container>\n        </cdk-virtual-scroll-viewport>\n      </div>\n    </div>  `,\n  styles: [`\n    .cdk-scroll-source {\n      writing-mode: vertical-lr;\n    }\n    .cdk-scroll-source .cdk-scroll-viewport {\n      height: 90px;\n      width: 100%;\n    }\n    .cdk-scroll-source .cdk-scroll-viewport .cdk-virtual-scroll-content-wrapper {\n      display: flex;\n      flex-direction: row;\n    }\n  `],\n  providers: [{provide: VIRTUAL_SCROLL_STRATEGY, useClass: CustomVirtualScrollStrategy}],\n  changeDetection: ChangeDetectionStrategy.OnPush\n\n})\nexport class ThumbnailListComponent implements OnInit, AfterViewInit {\n  @Input() set selectedImage (v: any){\n    if( v ) {\n      v && this.onSelectItem(v.item);\n      this.cdr.markForCheck();\n    }\n  };\n  @Input() set currentImages (im:  any) {\n    // console.log(' currentImages', im)\n    this._currentImages = im;\n    this.cdr.markForCheck();\n  }\n  @Output() selectItem = new EventEmitter<any>();\n  @ViewChild(CdkVirtualScrollViewport, { static: true }) viewPort: CdkVirtualScrollViewport | undefined;\n  @Select(StatusState.getSelectedImageById)  getSelectedImageById$: Observable<ImageModel>;\n  _currentImages: any;\n  addClass: {} = {};\n  draggedInx = 0;\n  idx = 0;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n  ) { }\n\n  ngOnInit(): void {\n    const initial_value = {\n      item: {\n        imageId: 1,\n        category: 'animal',\n        url: '',\n        blob: '',\n        title: ''\n      }\n    }\n    localStorage.setItem('selectedImageId', JSON.stringify(initial_value));\n    /**\n     * Triggered from series-list.component ( onSelectSeries),\n     *      carousel.service (getPrevImage, getNextImage)\n     */\n    this.getSelectedImageById$.pipe(\n      // takeUntil(this.unsubscribe$)\n      take(1)\n    ).subscribe( (image: any) => {\n\n      // To synchronize with the current selected item, after when it is activated by clicking item-list\n      localStorage.setItem('selectedImageId', JSON.stringify({item: image}));\n      setTimeout(() => {\n      // console.log(' data1 -', image.imageId)\n        this.viewPort.scrollToIndex(image.imageId, 'smooth')\n        this.addClass = {\n          class:'selected_item',\n          imageId: image.imageId\n        }\n      this.cdr.markForCheck();\n      },200);\n    })\n    ///\n  }\n  ngAfterViewInit() {\n    // Because of not focused with red border even though clicking item just after staring.\n    setTimeout(()=> {\n      this.addClass = {\n        class: 'selected_item',\n        index: 1\n      }\n    })\n  }\n\n  onSelectItem(ev:ImageModel) {\n    // console.log( '--- thumbnail-list id', ev )\n    if( !ev) return;\n\n    localStorage.setItem('selectedImageId', JSON.stringify({item:ev}));\n    this.selectItem.emit(ev); // send to home.component\n    /**\n     * To synchronize with the current selected item, after when it is activated by clicking item-list\n     * */\n    setTimeout(() => {\n      this.viewPort?.scrollToIndex(ev.imageId, 'smooth')\n      this.addClass = {\n        class: 'selected_item',\n        index: ev.imageId\n      }\n      this.cdr.detectChanges();\n    },300);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "extends": "FixedSizeVirtualScrollStrategy",
            "type": "injectable"
        },
        {
            "name": "ImageService",
            "id": "injectable-ImageService-6c02e6068299b7e207296c79c9e8af890bf1144f74e2675a3b86ea3576ef5f6c4472a65b1525a96b94e1eb9d9109fd4f0c589fd38db9d3e4089923fa390ee949",
            "file": "src/app/services/image.service.ts",
            "properties": [
                {
                    "name": "_cachedImages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_cachedThumbnailImages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_cacheUrls",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getCurrentCategory"
                        }
                    ]
                },
                {
                    "name": "category_list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getCategoryList"
                        }
                    ]
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "this.unsubscribe.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "checkAndCacheImage",
                    "args": [
                        {
                            "name": "data",
                            "type": "ImageModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ImageModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCacheImage",
                    "args": [
                        {
                            "name": "cat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCacheUrls",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCacheUrlsByCategory",
                    "args": [
                        {
                            "name": "cat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTotalImageList",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isThisUrlCached",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeCachedImage",
                    "args": [
                        {
                            "name": "data",
                            "type": "ImageModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ImageModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "readFile",
                    "args": [
                        {
                            "name": "blob",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "blob",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCacheUrl",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {Observable, of, Subject} from 'rxjs';\r\nimport {map, tap} from 'rxjs/operators';\r\nimport {StatusState} from \"../../state/status/status.state\";\r\nimport {SelectSnapshot} from \"@ngxs-labs/select-snapshot\";\r\nimport {downscaleImage} from \"../utils/down-scale-image\";\r\nimport {SetImageUrls, SetIsImageLoaded} from \"../../state/status/status.actions\";\r\nimport {ImageModel} from \"../models/data\";\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImageService implements  OnDestroy {\r\n  unsubscribe = new Subject();\r\n  unsubscribe$ = this.unsubscribe.asObservable()\r\n  private _cacheUrls: {\r\n    idx: number,\r\n    category: string,\r\n    url: string\r\n  }[] = [];\r\n  private _cachedImages: {\r\n    idx: number,\r\n    category: string,\r\n    image: ImageModel\r\n  }[] = [];\r\n  private _cachedThumbnailImages: {\r\n    idx: number,\r\n    category: string,\r\n    image: ImageModel\r\n  }[] = [];\r\n  @SelectSnapshot(StatusState.getCurrentCategory) category: string;\r\n  @SelectSnapshot(StatusState.getCategoryList) category_list: string[];\r\n  constructor(private http: HttpClient) { }\r\n\r\n  isThisUrlCached(url: string) {\r\n    return this._cacheUrls.find(val => val.url === url);\r\n  }\r\n  setCacheUrl(data:any) { // data: ImageModel\r\n    const cIdx: any = this.category_list.findIndex( val => val === data.category) + 1;\r\n    const nIdx = data.imageId < 10 ? (cIdx * 10 + data.imageId) : (cIdx * 100 + data.imageId);\r\n    const nUrl = { idx: nIdx, category: data.category, url: data.url};\r\n    // [{idx:10, url:'aaa'}, {idx:11, url:'bbb'}]\r\n    this._cacheUrls = [...this._cacheUrls,nUrl];\r\n    // console.log(' nUrl', nUrl, this._cacheUrls, cIdx)\r\n  }\r\n\r\n  getCacheUrls() {\r\n    return this._cacheUrls;\r\n  }\r\n  getCacheUrlsByCategory(cat: string) {\r\n    return this._cacheUrls.filter(val => val.category === cat);\r\n  }\r\n\r\n  set cachedImages(data: any) { // data: ImageModel\r\n    const cIdx: any = this.category_list.findIndex( val => val === data.category) + 1;\r\n    const nIdx = data.imageId < 10 ? (cIdx * 10 + data.imageId) : (cIdx * 100 + data.imageId);\r\n    const image: ImageModel = data.image;\r\n    this._cachedImages.push({idx:nIdx, category:data.category, image:image});\r\n  }\r\n  // @ts-ignore\r\n  get cachedImages(): any[] {\r\n    return this._cachedImages;\r\n  }\r\n  get cachedThumbnailImages(): any[] {\r\n    return this._cachedThumbnailImages;\r\n  }\r\n  getTotalImageList(url: string) {\r\n    // console.log('--- url', url);\r\n    // console.time('cccc')\r\n    return this.http.get(url).pipe(\r\n      map ( (res:any) => {\r\n        // console.timeEnd('cccc')\r\n        return res['data']\r\n      }),\r\n    )\r\n  }\r\n\r\n  getCacheImage(cat: string, idx: number) {\r\n    // console.log('getCacheImage', cat, idx)\r\n    const cIdx: any = this.category_list.findIndex( val => val === cat) + 1;\r\n    const nIdx = idx < 10 ? (cIdx * 10 + idx) : (cIdx * 100 + idx);\r\n    const index = this._cachedImages.findIndex(image => image.idx === nIdx);\r\n    if (index > -1) {\r\n      const res = this._cachedImages.filter(val => val.idx === nIdx);\r\n      return res[0].image.blob;\r\n    }\r\n    return ('')\r\n  }\r\n\r\n  checkAndCacheImage(data: ImageModel) {\r\n    const cIdx: any = this.category_list.findIndex( val => val === data.category) + 1;\r\n    const nIdx = data.imageId < 10 ? (cIdx * 10 + data.imageId) : (cIdx * 100 + data.imageId);\r\n    //\r\n    const ret = this._cacheUrls.find( val => val.idx === nIdx)\r\n    if( ret ) return;\r\n    this.setCacheUrl(data);\r\n    this._cachedImages.push({idx: nIdx, category: data.category, image: data});\r\n    /** Save image data as thumbnail */\r\n    let tData = Object.assign({}, data);\r\n    const file = downscaleImage(tData.blob, 'image/jpeg', 100,0.7);\r\n    file.then( val => {\r\n      tData.blob = val;\r\n      this._cachedThumbnailImages.push({idx: nIdx, category: tData.category, image: tData});\r\n    })\r\n\r\n  }\r\n  makeCachedImage(data: ImageModel): Observable<any>{\r\n    if(  !data.blob.type || !data.blob.size) {\r\n      // data is not Blob type.\r\n      return of(undefined);\r\n    }\r\n    const image: any = this.readFile(data.blob)\r\n    return image.pipe(\r\n      map((obj: any) =>  {\r\n        data.blob = obj;\r\n        this.checkAndCacheImage(data)\r\n        return data\r\n      }),\r\n      // tap( val => console.log('data1', val)),\r\n    )\r\n  }\r\n\r\n  readFile (blob: any): Observable<string>  {\r\n    return new Observable((obs: any) => {\r\n      const reader = new FileReader();\r\n\r\n      reader.onerror = err => obs.error(err);\r\n      reader.onabort = err => obs.error(err);\r\n      reader.onload = () => obs.next(reader.result);\r\n      reader.onloadend = () => obs.complete();\r\n\r\n      return reader.readAsDataURL(blob);\r\n    });\r\n  }\r\n  ngOnDestroy() {\r\n    this.unsubscribe.next({});\r\n    this.unsubscribe.complete();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "cachedImages": {
                    "name": "cachedImages",
                    "setSignature": {
                        "name": "cachedImages",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "cachedImages",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 63
                    }
                },
                "cachedThumbnailImages": {
                    "name": "cachedThumbnailImages",
                    "getSignature": {
                        "name": "cachedThumbnailImages",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 66
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "SeriesItemService",
            "id": "injectable-SeriesItemService-b91754fa49babc45369a63897f92c83d9fe9023f6576f86276b6894b4e045cac121e671492af3410ecb9c7a0625f5486738589f38e73cb77266e6f3cc1d263a7",
            "file": "src/app/components/series/series-item.service.ts",
            "properties": [
                {
                    "name": "category_list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getCategoryList"
                        }
                    ]
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "this.unsubscribe.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "getSeriesObject",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {concatMap, map, takeUntil, toArray} from \"rxjs/operators\";\nimport {from, Observable, Subject} from \"rxjs\";\nimport {SelectSnapshot} from \"@ngxs-labs/select-snapshot\";\nimport {StatusState} from \"../../../state/status/status.state\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SeriesItemService implements OnDestroy{\n  unsubscribe = new Subject();\n  unsubscribe$ = this.unsubscribe.asObservable();\n  @SelectSnapshot(StatusState.getCategoryList) category_list: string[] | undefined;\n  constructor(private http: HttpClient) { }\n\n  getSeriesObject(): Observable<any[]> {\n     const url_base = 'assets/json/';\n     // @ts-ignore\n    return from( this.category_list).pipe(\n       takeUntil(this.unsubscribe$),\n       map( cat => `${url_base}${cat}.json`),\n       concatMap( url => this.http.get(url)),\n       map( (dat: any, index) => {\n         // @ts-ignore\n         return {\n           url: dat.data[0].url,\n           seriesId: index + 1,\n           blob: '',\n           category: this.category_list[index]\n         }\n       }),\n       toArray()\n     )\n  }\n  ngOnDestroy() {\n    this.unsubscribe.next({});\n    this.unsubscribe.complete();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SpinnerHandlerService",
            "id": "injectable-SpinnerHandlerService-7e778e86c70cf6a030cf0d0a6ec673002c3711f2df57afa420bf7c948681427b96b0d1fa832e4970de0e4685232edfe108dfa71fa8cfd09f60f9541ae7da8152",
            "file": "src/app/utils/spinner/spinner-handler.service.ts",
            "properties": [
                {
                    "name": "handleRequest",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "numberOfRequests",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showSpinner",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpinnerHandlerService {\n\n  public numberOfRequests: number = 0;\n  public showSpinner: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  handleRequest = (state: string = 'minus'): void => {\n    this.numberOfRequests = (state === 'plus') ? this.numberOfRequests + 1 : this.numberOfRequests - 1;\n    this.showSpinner.next(this.numberOfRequests > 0);\n  };\n\n}\n",
            "type": "injectable"
        },
        {
            "name": "SplitService",
            "id": "injectable-SplitService-1877ba383331b2336275d9431ca602f17cc2ebbca530b8a7d6767a19dc56321ced5274f400ea5ed740200efd4ba259f70fbb419808df6d6cf1503728c1b4c9db",
            "file": "src/app/services/split.service.ts",
            "properties": [
                {
                    "name": "bWorker",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "category_list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getCategoryList"
                        }
                    ]
                },
                {
                    "name": "currentImageIndex",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "<p>Each category has image id, which is changed by clicking thumbnail item and by\nclicking previous arrow key  and next arrow key</p>\n",
                    "line": 17,
                    "rawdescription": "\nEach category has image id, which is changed by clicking thumbnail item and by\nclicking previous arrow key  and next arrow key"
                },
                {
                    "name": "elements",
                    "defaultValue": "['element1', 'element2', 'element3', 'element4']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "imageCount",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isFinishedRendering",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isFinishedRendering$",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isStartedRendering",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isStartedRendering$",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "progress",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selectedElement",
                    "defaultValue": "this.elements[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "resetSplitWindowProcessing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {Observable, Subject} from \"rxjs\";\r\nimport {Store} from \"@ngxs/store\";\r\nimport {SelectSnapshot} from \"@ngxs-labs/select-snapshot\";\r\nimport {StatusState} from \"../../state/status/status.state\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SplitService {\r\n  bWorker: any = undefined;\r\n\r\n  elements: any[] = ['element1', 'element2', 'element3', 'element4']\r\n  selectedElement: any = this.elements[0];\r\n  /** Each category has image id, which is changed by clicking thumbnail item and by\r\n   * clicking previous arrow key  and next arrow key */\r\n  currentImageIndex: {[key:string]: number} = {};\r\n  imageCount: {[key:string]:number} = {};\r\n  progress: {[key:string]:number} = {};\r\n\r\n  isFinishedRendering: {[key:string]: Subject<any>} = {};\r\n  isFinishedRendering$: {[key:string]: Observable<any>} = {};\r\n  isStartedRendering: {[key:string]: Subject<any>} = {};\r\n  isStartedRendering$: {[key:string]: Observable<any>} = {};\r\n  //\r\n  @SelectSnapshot(StatusState.getCategoryList) category_list:string[];\r\n\r\n  constructor(private store: Store) { }\r\n  resetSplitWindowProcessing() {\r\n    this.category_list.map( val => this.currentImageIndex[val] = 0 )\r\n    this.elements.map( val => {\r\n      this.isFinishedRendering[val] = new Subject();\r\n      this.isFinishedRendering$[val] = this.isFinishedRendering[val].asObservable();\r\n      this.isStartedRendering[val] = new Subject();\r\n      this.isStartedRendering$[val] = this.isStartedRendering[val].asObservable();\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StatusState",
            "id": "injectable-StatusState-f2eb4d768985e43234198dda23572d2ab7de3039ab6d3eee2be3a1deca4895fb433d34039ea3cf98a9286885769ca68af757aeefe00c420740ee681251e7c7c2",
            "file": "src/state/status/status.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "StatusAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "StatusAction"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "StatusAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getActiveSplit",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCategoryList",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentCategory",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentSplitOperation",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFocusedSplit",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getImageUrls",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIsImageLoaded",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIsSeriesLoaded",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedGridTemplate",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ISelectedGridTemplate",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedImageById",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ImageModel",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedImageByUrl",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedSeriesById",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedSplitWindowId",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSeriesUrls",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSplitAction",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSplitCategories",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSplitMode",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getState",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StatusStateModel",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWebworkerWorkingStatus",
                    "args": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "StatusStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedGridTemplate",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SelectedGridTemplate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SelectedGridTemplate"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SelectedGridTemplate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setActiveSplit",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetActiveSplit",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetActiveSplit"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetActiveSplit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCategoryList",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetCategoryList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetCategoryList"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetCategoryList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCurrentCategory",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetCurrentCategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetCurrentCategory"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetCurrentCategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCurrentSplitOperation",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetCurrentSplitOperation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetCurrentSplitOperation"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetCurrentSplitOperation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFocusedSplit",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetFocusedSplit",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetFocusedSplit"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetFocusedSplit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setImageUrls",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetImageUrls",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetImageUrls"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetImageUrls",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setIsImageLoaded",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetIsImageLoaded",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetIsImageLoaded"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetIsImageLoaded",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setIsSeriesLoaded",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetIsSeriesLoaded",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetIsSeriesLoaded"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetIsSeriesLoaded",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedImageById",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetSelectedImageById",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetSelectedImageById"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetSelectedImageById",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedImageByUrl",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetSelectedImageByUrl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetSelectedImageByUrl"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetSelectedImageByUrl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedSeriesById",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetSelectedSeriesById",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetSelectedSeriesById"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetSelectedSeriesById",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedSplitWindowId",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetSelectedSplitWindowId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetSelectedSplitWindowId"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetSelectedSplitWindowId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSeriesUrls",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetSeriesUrls",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetSeriesUrls"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetSeriesUrls",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSplitAction",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetSplitAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetSplitAction"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetSplitAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSplitCategory",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetSplitCategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetSplitCategory"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetSplitCategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSplitMode",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetSplitMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetSplitMode"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetSplitMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setWebworkerWorkingStatus",
                    "args": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "SetWebworkerWorkingStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SetWebworkerWorkingStatus"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<StatusStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "SetWebworkerWorkingStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { State, Action, Selector, StateContext } from '@ngxs/store';\r\nimport {\r\n  SelectedGridTemplate,\r\n  SetActiveSplit, SetCategoryList,\r\n  SetCurrentCategory, SetCurrentSplitOperation, SetFocusedSplit,\r\n  SetImageUrls,\r\n  SetIsImageLoaded,\r\n  SetIsSeriesLoaded,\r\n  SetSelectedImageById,\r\n  SetSelectedImageByUrl,\r\n  SetSelectedSeriesById,\r\n  SetSelectedSplitWindowId, SetSeriesUrls, SetSplitAction,\r\n  SetSplitMode,\r\n  SetSplitCategory, SetWebworkerWorkingStatus,\r\n  StatusAction\r\n} from './status.actions';\r\nimport {Injectable} from \"@angular/core\";\r\nimport {ImageModel} from \"../../app/models/data\";\r\nexport interface ISelectedGridTemplate {\r\n  templateName: string,\r\n  button: 'left' | 'right'\r\n}\r\nexport interface StatusStateModel {\r\n  selectedGridTemplate: ISelectedGridTemplate;\r\n  items: string[];\r\n  isImageLoaded: {} ; // from 0\r\n  isSeriesLoaded: boolean;\r\n  imageUrls: string[]; //\r\n  seriesUrls: string[]; //\r\n  currentCategory: string;\r\n  category_list: string[];\r\n  focusedSplit: number;\r\n  selectedImageId: ImageModel;\r\n  selectedImageUrl: string;\r\n  splitMode: number;\r\n  splitCategory: string[];\r\n  splitAction: boolean;\r\n  selectedSeriesById: number;\r\n  selectedSplitWindowId: string;\r\n  webworkerWorkingStatus: boolean;\r\n  currentSplitOperation: {},\r\n  activeSplit: number\r\n}\r\n\r\n@State<StatusStateModel>({\r\n  name: 'status',\r\n  defaults: {\r\n    selectedGridTemplate: {templateName: '', button: 'left'},\r\n    items: [],\r\n    isImageLoaded: { idx: 0},\r\n    isSeriesLoaded: false,\r\n    imageUrls: [],\r\n    seriesUrls: [],\r\n    currentCategory: '',\r\n    //category_list:['animal', 'house', 'baby','forest', 'happiness', 'love','sea','banana' ],\r\n    category_list:['animal', 'house', 'baby', 'forest', 'happiness', 'love', 'sea','banana', 'mountain'],\r\n    focusedSplit: 0, // 0: split1, 1: split2, 2: split3, 3: split4\r\n    selectedImageId: {\r\n      imageId: 0,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: '',\r\n      title: ''\r\n    },\r\n    selectedImageUrl: '',\r\n    splitMode: 1, // 1: active --> split1, 2: active --> split1, split2\r\n    splitCategory: ['animal', 'house', 'baby', 'forest'],\r\n    splitAction: false,\r\n    selectedSeriesById: 0,\r\n    selectedSplitWindowId: 'element1',\r\n    webworkerWorkingStatus: false,\r\n    currentSplitOperation: {\r\n      element: ''\r\n    },\r\n    activeSplit: 0\r\n  }\r\n})\r\n@Injectable()\r\nexport class StatusState {\r\n\r\n  @Selector()\r\n  public static getSelectedGridTemplate(state: StatusStateModel) {\r\n    return state.selectedGridTemplate;\r\n  }\r\n  @Selector()\r\n  public static getState(state: StatusStateModel) {\r\n    return state;\r\n  }\r\n  @Selector()\r\n  public static getIsImageLoaded(state: StatusStateModel) {\r\n    return state.isImageLoaded;\r\n  }\r\n  @Selector()\r\n  public static getIsSeriesLoaded(state: StatusStateModel) {\r\n    return state.isSeriesLoaded;\r\n  }\r\n  @Selector()\r\n  public static getImageUrls(state: StatusStateModel) {\r\n    return state.imageUrls;\r\n  }\r\n  @Selector()\r\n  public static getSeriesUrls(state: StatusStateModel) {\r\n    return state.seriesUrls;\r\n  }\r\n  @Selector()\r\n  public static getCurrentCategory(state: StatusStateModel) {\r\n    return state.currentCategory;\r\n  }\r\n  @Selector()\r\n  public static getCategoryList(state: StatusStateModel) {\r\n    return state.category_list;\r\n  }\r\n  @Selector()\r\n  public static getFocusedSplit(state: StatusStateModel) {\r\n    return state.focusedSplit;\r\n  }\r\n  @Selector()\r\n  public static getSelectedImageById(state: StatusStateModel) {\r\n    return state.selectedImageId;\r\n  }\r\n  @Selector()\r\n  public static getSelectedImageByUrl(state: StatusStateModel) {\r\n    return state.selectedImageUrl;\r\n  }\r\n  @Selector()\r\n  public static getSplitMode(state: StatusStateModel) {\r\n    return state.splitMode;\r\n  }\r\n  @Selector()\r\n  public static getSplitCategories(state: StatusStateModel) {\r\n    return state.splitCategory;\r\n  }\r\n  @Selector()\r\n  public static getSplitAction(state: StatusStateModel) {\r\n    return state.splitAction;\r\n  }\r\n  @Selector()\r\n  public static getSelectedSeriesById(state: StatusStateModel) {\r\n    return state.selectedSeriesById;\r\n  }\r\n  @Selector()\r\n  public static getSelectedSplitWindowId(state: StatusStateModel) {\r\n    return state.selectedSplitWindowId;\r\n  }\r\n  @Selector()\r\n  public static getWebworkerWorkingStatus(state: StatusStateModel) {\r\n    return state.webworkerWorkingStatus;\r\n  }\r\n  @Selector()\r\n  public static getCurrentSplitOperation(state: StatusStateModel) {\r\n    return state.currentSplitOperation;\r\n  }\r\n  @Selector()\r\n  public static getActiveSplit(state: StatusStateModel) {\r\n    return state.activeSplit;\r\n  }\r\n\r\n  @Action(SelectedGridTemplate)\r\n  public selectedGridTemplate({patchState, getState}: StateContext<StatusStateModel>, { payload }: SelectedGridTemplate) {\r\n    const obj = getState().selectedGridTemplate;\r\n    // console.log(' payload', payload)\r\n    patchState({selectedGridTemplate: {...obj, ...payload}});\r\n  }\r\n  @Action(StatusAction)\r\n  public add(ctx: StateContext<StatusStateModel>, { payload }: StatusAction) {\r\n    const stateModel = ctx.getState();\r\n    stateModel.items = [...stateModel.items, payload];\r\n    ctx.setState(stateModel);\r\n  }\r\n  @Action(SetIsImageLoaded)\r\n  public setIsImageLoaded({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetIsImageLoaded) {\r\n    const obj = getState().isImageLoaded;\r\n    patchState({isImageLoaded: {...obj, ...payload}})\r\n  }\r\n  @Action(SetIsSeriesLoaded)\r\n  public setIsSeriesLoaded({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetIsSeriesLoaded) {\r\n    patchState({isSeriesLoaded: payload})\r\n  }\r\n  @Action(SetImageUrls)\r\n  public setImageUrls({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetImageUrls) {\r\n    let urls = getState().imageUrls;\r\n    patchState({imageUrls: [...urls, ...payload]});\r\n  }\r\n  @Action(SetSeriesUrls)\r\n  public setSeriesUrls({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSeriesUrls) {\r\n    let urls = getState().seriesUrls;\r\n    patchState({seriesUrls: [...urls, ...payload]});\r\n  }\r\n  @Action(SetCurrentCategory)\r\n  public setCurrentCategory({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetCurrentCategory) {\r\n    patchState({currentCategory: payload})\r\n  }\r\n  @Action(SetCategoryList)\r\n  public setCategoryList({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetCategoryList) {\r\n    patchState({category_list: payload})\r\n  }\r\n  @Action(SetFocusedSplit)\r\n  public setFocusedSplit({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetFocusedSplit) {\r\n    patchState({focusedSplit: payload})\r\n  }\r\n  @Action(SetSelectedImageById)\r\n  public setSelectedImageById({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSelectedImageById) {\r\n    const imageId = getState().selectedImageId;\r\n    patchState({selectedImageId: {...imageId, ...payload}})\r\n  }\r\n  @Action(SetSelectedImageByUrl)\r\n  public setSelectedImageByUrl({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSelectedImageByUrl) {\r\n    patchState({selectedImageUrl: payload})\r\n  }\r\n  @Action(SetSplitMode)\r\n  public setSplitMode({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSplitMode) {\r\n    patchState({splitMode: payload})\r\n  }\r\n  @Action(SetSplitCategory)\r\n  public setSplitCategory({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSplitCategory) {\r\n    const state = getState().splitCategory;\r\n    const idx = payload.idx;\r\n    const category = payload.category\r\n    state[idx] = category\r\n    patchState({splitCategory: [...state]})\r\n  }\r\n  @Action(SetSplitAction)\r\n  public setSplitAction({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSplitAction) {\r\n    patchState({splitAction: payload})\r\n  }\r\n  @Action(SetSelectedSeriesById)\r\n  public setSelectedSeriesById({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSelectedSeriesById) {\r\n    patchState({selectedSeriesById: payload})\r\n  }\r\n  @Action(SetSelectedSplitWindowId)\r\n  public setSelectedSplitWindowId({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetSelectedSplitWindowId) {\r\n    patchState({selectedSplitWindowId: payload})\r\n  }\r\n  @Action(SetWebworkerWorkingStatus)\r\n  public setWebworkerWorkingStatus({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetWebworkerWorkingStatus) {\r\n    patchState({webworkerWorkingStatus: payload})\r\n  }\r\n  @Action(SetCurrentSplitOperation)\r\n  public setCurrentSplitOperation({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetCurrentSplitOperation) {\r\n    const obj = getState().currentSplitOperation;\r\n    patchState({currentSplitOperation: { ...obj, ...payload }})\r\n  }\r\n  @Action(SetActiveSplit)\r\n  public setActiveSplit({patchState,getState}: StateContext<StatusStateModel>, { payload }: SetActiveSplit) {\r\n    patchState({activeSplit: payload})\r\n  }\r\n\r\n}\r\n",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "SpinnerInterceptorService",
            "id": "injectable-SpinnerInterceptorService-61134d855974ea24af33675ba213085084eda92e018ff9b6f3dd1a60a442aff4befa22a7f0f547a23b55f33328565d3b50d2c4a2c2b7e5db0eaad93adcc6e86c",
            "file": "src/app/utils/spinner/spinner-interceptor.service.ts",
            "properties": [
                {
                    "name": "finalize",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "spinnerHandler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpinnerHandlerService",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nimport { SpinnerHandlerService } from './spinner-handler.service';\n\n@Injectable()\nexport class SpinnerInterceptorService implements HttpInterceptor {\n\n  constructor(\n    public spinnerHandler: SpinnerHandlerService\n  ) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    this.spinnerHandler.handleRequest('plus');\n    return next\n      .handle(request)\n      .pipe(\n        finalize(this.finalize.bind(this))\n      );\n  }\n\n  finalize = (): void => this.spinnerHandler.handleRequest();\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "spinnerHandler",
                        "type": "SpinnerHandlerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "spinnerHandler",
                        "type": "SpinnerHandlerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "LoadingWorker",
            "id": "class-LoadingWorker-ed09f009046345e3b664b6350918cc21ef263f338e9bd98f0ede53a2e913f1d15568ef7e74e0b1d242c7dcf60de1d5c1d3e77530e34bb8329308c427e8f70f6d",
            "file": "src/assets/workers/additional-loading.worker.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DoWork, runWorker } from 'observable-webworker';\r\nimport {from, Observable, of, Subject} from 'rxjs';\r\nimport {filter, finalize, map, mergeMap, switchMap, takeLast, takeUntil, tap, toArray} from 'rxjs/operators';\r\n\r\nexport class LoadingWorker implements DoWork<{}, string[]> {\r\n  public work(input$: Observable<{}>): Observable<string[]> {\r\n   return input$.pipe(\r\n      switchMap((m: any) => {\r\n        let re = m.req;\r\n        if( m.urls.filter((val:any) => val.category === m.category ).length === 0 ) return of(m.req)\r\n        return from(m.urls).pipe(\r\n          // takeUntil(this.unsubscribe$),\r\n          filter((obj: any) => obj.category === m.category),\r\n          toArray(),\r\n          switchMap((objList: any[]) => {\r\n            // [Object{idx: 10, category: 'animal', url: 'aaaaa'},\r\n            //  Object{idx: 11, category: 'animal', url: 'bbbbb'}]\r\n            return from(objList).pipe(\r\n              // takeUntil(this.unsubscribe$),\r\n              mergeMap( obj => {\r\n                return from(re).pipe(\r\n                  // takeUntil(this.unsubscribe$),\r\n                  filter((val: any) => val.url !== obj.url),\r\n                  toArray(),\r\n                )\r\n              }),\r\n              // to recursive operation\r\n              tap((req) => re = req),\r\n              takeLast(1),\r\n          )\r\n          }),\r\n        )\r\n      }),\r\n    );\r\n\r\n  }\r\n}\r\nrunWorker(LoadingWorker);\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "work",
                    "args": [
                        {
                            "name": "input$",
                            "type": "Observable<literal type>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "input$",
                            "type": "Observable<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "DoWork"
            ]
        },
        {
            "name": "LoadingWorker",
            "id": "class-LoadingWorker-ed09f009046345e3b664b6350918cc21ef263f338e9bd98f0ede53a2e913f1d15568ef7e74e0b1d242c7dcf60de1d5c1d3e77530e34bb8329308c427e8f70f6d-1",
            "file": "storybook-static/assets/workers/additional-loading.worker.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DoWork, runWorker } from 'observable-webworker';\r\nimport {from, Observable, of, Subject} from 'rxjs';\r\nimport {filter, finalize, map, mergeMap, switchMap, takeLast, takeUntil, tap, toArray} from 'rxjs/operators';\r\n\r\nexport class LoadingWorker implements DoWork<{}, string[]> {\r\n  public work(input$: Observable<{}>): Observable<string[]> {\r\n   return input$.pipe(\r\n      switchMap((m: any) => {\r\n        let re = m.req;\r\n        if( m.urls.filter((val:any) => val.category === m.category ).length === 0 ) return of(m.req)\r\n        return from(m.urls).pipe(\r\n          // takeUntil(this.unsubscribe$),\r\n          filter((obj: any) => obj.category === m.category),\r\n          toArray(),\r\n          switchMap((objList: any[]) => {\r\n            // [Object{idx: 10, category: 'animal', url: 'aaaaa'},\r\n            //  Object{idx: 11, category: 'animal', url: 'bbbbb'}]\r\n            return from(objList).pipe(\r\n              // takeUntil(this.unsubscribe$),\r\n              mergeMap( obj => {\r\n                return from(re).pipe(\r\n                  // takeUntil(this.unsubscribe$),\r\n                  filter((val: any) => val.url !== obj.url),\r\n                  toArray(),\r\n                )\r\n              }),\r\n              // to recursive operation\r\n              tap((req) => re = req),\r\n              takeLast(1),\r\n          )\r\n          }),\r\n        )\r\n      }),\r\n    );\r\n\r\n  }\r\n}\r\nrunWorker(LoadingWorker);\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "work",
                    "args": [
                        {
                            "name": "input$",
                            "type": "Observable<literal type>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "input$",
                            "type": "Observable<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "DoWork"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LoadingWorker-1"
        },
        {
            "name": "LoadingWorker",
            "id": "class-LoadingWorker-ed09f009046345e3b664b6350918cc21ef263f338e9bd98f0ede53a2e913f1d15568ef7e74e0b1d242c7dcf60de1d5c1d3e77530e34bb8329308c427e8f70f6d-2",
            "file": "dist/split-window220225/assets/workers/additional-loading.worker.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DoWork, runWorker } from 'observable-webworker';\r\nimport {from, Observable, of, Subject} from 'rxjs';\r\nimport {filter, finalize, map, mergeMap, switchMap, takeLast, takeUntil, tap, toArray} from 'rxjs/operators';\r\n\r\nexport class LoadingWorker implements DoWork<{}, string[]> {\r\n  public work(input$: Observable<{}>): Observable<string[]> {\r\n   return input$.pipe(\r\n      switchMap((m: any) => {\r\n        let re = m.req;\r\n        if( m.urls.filter((val:any) => val.category === m.category ).length === 0 ) return of(m.req)\r\n        return from(m.urls).pipe(\r\n          // takeUntil(this.unsubscribe$),\r\n          filter((obj: any) => obj.category === m.category),\r\n          toArray(),\r\n          switchMap((objList: any[]) => {\r\n            // [Object{idx: 10, category: 'animal', url: 'aaaaa'},\r\n            //  Object{idx: 11, category: 'animal', url: 'bbbbb'}]\r\n            return from(objList).pipe(\r\n              // takeUntil(this.unsubscribe$),\r\n              mergeMap( obj => {\r\n                return from(re).pipe(\r\n                  // takeUntil(this.unsubscribe$),\r\n                  filter((val: any) => val.url !== obj.url),\r\n                  toArray(),\r\n                )\r\n              }),\r\n              // to recursive operation\r\n              tap((req) => re = req),\r\n              takeLast(1),\r\n          )\r\n          }),\r\n        )\r\n      }),\r\n    );\r\n\r\n  }\r\n}\r\nrunWorker(LoadingWorker);\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "work",
                    "args": [
                        {
                            "name": "input$",
                            "type": "Observable<literal type>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "input$",
                            "type": "Observable<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "DoWork"
            ],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "LoadingWorker-2"
        },
        {
            "name": "SelectedGridTemplate",
            "id": "class-SelectedGridTemplate-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "ISelectedGridTemplate",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "ISelectedGridTemplate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISelectedGridTemplate",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'Selected Grid Template by arrow button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SeriesWorker",
            "id": "class-SeriesWorker-81652257fc3917b58cdd66100cafefc6ddb39f7ac2ac3c00bbaa6b0a5197a24d6f4e40ad37a85e4316c4e6cb9ab12f88b924ed9682d26bf82915a3da3b1454bd",
            "file": "src/assets/workers/series.worker.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {DoWork, runWorker} from \"observable-webworker\";\nimport {defer, from, Observable, of} from \"rxjs\";\nimport {concatMap, delay, map, switchMap, tap} from \"rxjs/operators\";\nimport {XMLHttpComm} from \"../../app/utils/XMLHttpComm\";\n\n\nexport class SeriesWorker implements DoWork<{}, {}> {\n  public work(input$: Observable<{}>): Observable<{}> {\n    let oriData: any;\n    return input$.pipe(\n      // tap(va => console.log('-- va', va)),\n      map( (val: any) => oriData = val),\n      switchMap((arr: any[]) => {\n        return  from(arr).pipe(\n          concatMap( async val => {\n            const url = val.url;\n            return await XMLHttpComm(url)\n          }),\n          map( (res, idx) => {\n            // console.log('--- axios --', res, idx, oriData[idx].category)\n            return {\n              seriesId: idx,\n              url: oriData[idx].url,\n              blob: res,\n              //blob: res.data,\n              category: oriData[idx].category\n            }\n          }),\n        )\n      })\n    );\n  }\n}\nrunWorker(SeriesWorker);\n",
            "properties": [],
            "methods": [
                {
                    "name": "work",
                    "args": [
                        {
                            "name": "input$",
                            "type": "Observable<literal type>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "input$",
                            "type": "Observable<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "DoWork"
            ]
        },
        {
            "name": "SeriesWorker",
            "id": "class-SeriesWorker-81652257fc3917b58cdd66100cafefc6ddb39f7ac2ac3c00bbaa6b0a5197a24d6f4e40ad37a85e4316c4e6cb9ab12f88b924ed9682d26bf82915a3da3b1454bd-1",
            "file": "storybook-static/assets/workers/series.worker.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {DoWork, runWorker} from \"observable-webworker\";\nimport {defer, from, Observable, of} from \"rxjs\";\nimport {concatMap, delay, map, switchMap, tap} from \"rxjs/operators\";\nimport {XMLHttpComm} from \"../../app/utils/XMLHttpComm\";\n\n\nexport class SeriesWorker implements DoWork<{}, {}> {\n  public work(input$: Observable<{}>): Observable<{}> {\n    let oriData: any;\n    return input$.pipe(\n      // tap(va => console.log('-- va', va)),\n      map( (val: any) => oriData = val),\n      switchMap((arr: any[]) => {\n        return  from(arr).pipe(\n          concatMap( async val => {\n            const url = val.url;\n            return await XMLHttpComm(url)\n          }),\n          map( (res, idx) => {\n            // console.log('--- axios --', res, idx, oriData[idx].category)\n            return {\n              seriesId: idx,\n              url: oriData[idx].url,\n              blob: res,\n              //blob: res.data,\n              category: oriData[idx].category\n            }\n          }),\n        )\n      })\n    );\n  }\n}\nrunWorker(SeriesWorker);\n",
            "properties": [],
            "methods": [
                {
                    "name": "work",
                    "args": [
                        {
                            "name": "input$",
                            "type": "Observable<literal type>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "input$",
                            "type": "Observable<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "DoWork"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SeriesWorker-1"
        },
        {
            "name": "SeriesWorker",
            "id": "class-SeriesWorker-81652257fc3917b58cdd66100cafefc6ddb39f7ac2ac3c00bbaa6b0a5197a24d6f4e40ad37a85e4316c4e6cb9ab12f88b924ed9682d26bf82915a3da3b1454bd-2",
            "file": "dist/split-window220225/assets/workers/series.worker.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {DoWork, runWorker} from \"observable-webworker\";\nimport {defer, from, Observable, of} from \"rxjs\";\nimport {concatMap, delay, map, switchMap, tap} from \"rxjs/operators\";\nimport {XMLHttpComm} from \"../../app/utils/XMLHttpComm\";\n\n\nexport class SeriesWorker implements DoWork<{}, {}> {\n  public work(input$: Observable<{}>): Observable<{}> {\n    let oriData: any;\n    return input$.pipe(\n      // tap(va => console.log('-- va', va)),\n      map( (val: any) => oriData = val),\n      switchMap((arr: any[]) => {\n        return  from(arr).pipe(\n          concatMap( async val => {\n            const url = val.url;\n            return await XMLHttpComm(url)\n          }),\n          map( (res, idx) => {\n            // console.log('--- axios --', res, idx, oriData[idx].category)\n            return {\n              seriesId: idx,\n              url: oriData[idx].url,\n              blob: res,\n              //blob: res.data,\n              category: oriData[idx].category\n            }\n          }),\n        )\n      })\n    );\n  }\n}\nrunWorker(SeriesWorker);\n",
            "properties": [],
            "methods": [
                {
                    "name": "work",
                    "args": [
                        {
                            "name": "input$",
                            "type": "Observable<literal type>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "input$",
                            "type": "Observable<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "DoWork"
            ],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "SeriesWorker-2"
        },
        {
            "name": "SetActiveSplit",
            "id": "class-SetActiveSplit-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 81,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Set active split '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetCategoryList",
            "id": "class-SetCategoryList-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Category list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetCurrentCategory",
            "id": "class-SetCurrentCategory-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Current category'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetCurrentSplitOperation",
            "id": "class-SetCurrentSplitOperation-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Set current split operation'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetFocusedSplit",
            "id": "class-SetFocusedSplit-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Focused split'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetImageUrls",
            "id": "class-SetImageUrls-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Cache image urls'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetIsImageLoaded",
            "id": "class-SetIsImageLoaded-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Is Imaged Loaded'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetIsSeriesLoaded",
            "id": "class-SetIsSeriesLoaded-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Is Series Loaded'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetSelectedImageById",
            "id": "class-SetSelectedImageById-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "ImageModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "ImageModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ImageModel",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Selected image id'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetSelectedImageByUrl",
            "id": "class-SetSelectedImageByUrl-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Selected image url'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetSelectedSeriesById",
            "id": "class-SetSelectedSeriesById-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Selected series id'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetSelectedSplitWindowId",
            "id": "class-SetSelectedSplitWindowId-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Selected split window id'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetSeriesUrls",
            "id": "class-SetSeriesUrls-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Cache series urls'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetSplitAction",
            "id": "class-SetSplitAction-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Set split action'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetSplitCategory",
            "id": "class-SetSplitCategory-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Set split state'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetSplitMode",
            "id": "class-SetSplitMode-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Set Window split'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetWebworkerWorkingStatus",
            "id": "class-SetWebworkerWorkingStatus-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Set Webworker WorkingStatus'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StatusAction",
            "id": "class-StatusAction-3aca73e0e1340e2097d40ee8b3ef5eb66625f5e7adfd7235787ccd345830ed949b1717ac100b4dd8ab21ba01845e6ff81c0047f379e0add19415b751a37a51b6",
            "file": "src/state/status/status.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ImageModel} from \"@repo20220121/data\";\r\nimport {ISelectedGridTemplate} from \"./status.state\";\r\n\r\nexport class SelectedGridTemplate {\r\n  public static readonly type = 'Selected Grid Template by arrow button';\r\n  constructor(public payload: ISelectedGridTemplate) { }\r\n}\r\nexport class StatusAction {\r\n  public static readonly type = '[Status] Add item';\r\n  constructor(public payload: string) { }\r\n}\r\nexport class SetIsImageLoaded {\r\n  public static readonly type = '[Status] Is Imaged Loaded';\r\n  constructor(public payload: {idx:number}) { }\r\n}\r\nexport class SetIsSeriesLoaded {\r\n  public static readonly type = '[Status] Is Series Loaded';\r\n  constructor(public payload: boolean) { }\r\n}\r\nexport class SetImageUrls {\r\n  public static readonly type = '[Status] Cache image urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetSeriesUrls {\r\n  public static readonly type = '[Status] Cache series urls';\r\n  constructor(public payload: string[]) { }\r\n}\r\nexport class SetCurrentCategory {\r\n  public static readonly type = '[Status] Current category';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetCategoryList {\r\n  public static readonly type = '[Status] Category list';\r\n  constructor(public payload: string[] ) { }\r\n}\r\nexport class SetFocusedSplit {\r\n  public static readonly type = '[Status] Focused split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedImageById {\r\n  public static readonly type = '[Status] Selected image id';\r\n  constructor(public payload: ImageModel ) { }\r\n}\r\nexport class SetSelectedImageByUrl {\r\n  public static readonly type = '[Status] Selected image url';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetSplitMode {\r\n  public static readonly type = '[Status] Set Window split';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSplitCategory {\r\n  public static readonly type = '[Status] Set split state';\r\n  constructor(public payload: {idx:number, category:string} ) { }\r\n}\r\nexport class SetSplitAction {\r\n  public static readonly type = '[Status] Set split action';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetSelectedSeriesById {\r\n  public static readonly type = '[Status] Selected series id';\r\n  constructor(public payload: number ) { }\r\n}\r\nexport class SetSelectedSplitWindowId {\r\n  public static readonly type = '[Status] Selected split window id';\r\n  constructor(public payload: string ) { }\r\n}\r\nexport class SetWebworkerWorkingStatus {\r\n  public static readonly type = '[Status] Set Webworker WorkingStatus';\r\n  constructor(public payload: boolean ) { }\r\n}\r\nexport class SetCurrentSplitOperation {\r\n  public static readonly type = '[Status] Set current split operation';\r\n  constructor(public payload: {element: string} ) { }\r\n}\r\nexport class SetActiveSplit {\r\n  public static readonly type = '[Status] Set active split ';\r\n  constructor(public payload: number ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Status] Add item'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "GridTemplateDirective",
            "id": "directive-GridTemplateDirective-3efc00a116207e51aacbe0e9fc64fb5681db245769ed40c16a10d97bfc186e14b5da1d6dd2e022324ffa4977de9e0aab9df28e4a9babc3b7fc8d6d6627485b87",
            "file": "src/app/components/grid/grid-directives/grid-template.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, Input, TemplateRef} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appGridTemplate]'\r\n})\r\nexport class GridTemplateDirective {\r\n  @Input('appGridTemplate') name?: string;\r\n\r\n  constructor(public template: TemplateRef<any>) { }\r\n\r\n}\r\n",
            "selector": "[appGridTemplate]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appGridTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SelectColorDirective",
            "id": "directive-SelectColorDirective-d45db01ca75c16711cd958ca407a2e554765acb51c21b79ebcb2af3ba54d892cb78ea858072d913751ae7898792de48aa05b21e9427bf657430720a592781c84",
            "file": "src/app/components/grid/grid-directives/select-color.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, EventEmitter, HostBinding, HostListener, Input, OnChanges, OnDestroy, OnInit, Output, Renderer2, SimpleChanges} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[selectColor]'\r\n})\r\nexport class SelectColorDirective implements  OnChanges{\r\n  @Input('selectColor') sTemplate?: string;\r\n  @Input() selectedTemplate?:string;\r\n  @Output() selectTemplate = new EventEmitter();\r\n  constructor() {}\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if(changes['selectedTemplate'].currentValue === this.sTemplate) {\r\n      this.border = '3px solid red';\r\n      //console.log('- wsjung SelectColorDirective-- changes', changes, changes.selectedTemplate.currentValue)\r\n    } else {\r\n      this.border = '2px solid gray';\r\n    }\r\n  }\r\n\r\n  @HostBinding('style.border') border?: string;\r\n  @HostBinding('style.zIndex') zIndex?: number;\r\n  @HostListener('mouseover') onMouseOver() {\r\n    if( this.selectedTemplate !== this.sTemplate) {\r\n      this.border = '3px solid blue';\r\n    }\r\n  }\r\n  @HostListener('click') onClick() {\r\n    this.border = '3px solid red';\r\n    this.selectTemplate.emit(this.sTemplate);\r\n  }\r\n  @HostListener('mouseleave') onMouseLeave() {\r\n    if( this.selectedTemplate !== this.sTemplate) {\r\n      this.border = '2px solid gray';\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[selectColor]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "selectColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectTemplate",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.border",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.zIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31
                },
                {
                    "name": "mouseover",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22
                }
            ],
            "propertiesClass": [
                {
                    "name": "border",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.border'"
                        }
                    ]
                },
                {
                    "name": "zIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.zIndex'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseover'"
                        }
                    ]
                }
            ],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-47465f712f48a67b59cf072d3ad7331ffce72313f6993dfc82b70f47a22ef16e59a4c3130434d9a0f0add03a4a51df2d58646435389eae10aebc43d4e68b4b83",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "repo20220121-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "progress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "onSelectedTemplate",
                    "args": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'repo20220121-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  progress = 0;\n  // constructor(private http: HttpClient) {}\n  onSelectedTemplate(ev : any) {\n    // console.log(' AppComponent onSelectedTemplate ev', ev);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<!--<div>Message: {{ hello$ | async | json }}</div>-->\n<spinner></spinner>\n<home>\n</home>\n"
        },
        {
            "name": "CarouselMainComponent",
            "id": "component-CarouselMainComponent-9965ab068533456a33b780306446ef7e1a90d7137fdc29f70949b023725884e9fdcfc35227a4f9d36ec6e8c33c2c6fe2c1f920e18eed8402039381edfa26a1a0",
            "file": "src/app/components/carousel/carousel-main/carousel-main.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-carousel-main",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"w-auto h-auto\">\n  <carousel-main-display\n    [progress]=\"progress\"\n    [splitIdx]=\"splitIdx\"\n    [img]=\"image\">\n  </carousel-main-display>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "queryElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeSplit$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "StatusState.getActiveSplit"
                        }
                    ]
                },
                {
                    "name": "category",
                    "defaultValue": "'animal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "category_list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getCategoryList"
                        }
                    ]
                },
                {
                    "name": "categoryIdx",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "currentCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getCurrentCategory"
                        }
                    ]
                },
                {
                    "name": "focusedSplitIdx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getFocusedSplit"
                        }
                    ]
                },
                {
                    "name": "getCurrentSplitOperation$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "StatusState.getCurrentSplitOperation"
                        }
                    ]
                },
                {
                    "name": "getIsImageLoaded$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "StatusState.getIsImageLoaded"
                        }
                    ]
                },
                {
                    "name": "getIsSeriesLoaded$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "StatusState.getIsSeriesLoaded"
                        }
                    ]
                },
                {
                    "name": "getSelectedImageById$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ImageModel>",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "StatusState.getSelectedImageById"
                        }
                    ]
                },
                {
                    "name": "getSelectedSeriesById$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "StatusState.getSelectedSeriesById"
                        }
                    ]
                },
                {
                    "name": "getSeriesUrls$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "StatusState.getSeriesUrls"
                        }
                    ]
                },
                {
                    "name": "getWebworkerWorkingStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getWebworkerWorkingStatus"
                        }
                    ]
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "originalImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "progress",
                    "defaultValue": "{value: 0, category: 'animal'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "requestRenderingSplitWindow$",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "selectedSplitWindow",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "splitAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getSplitAction"
                        }
                    ]
                },
                {
                    "name": "splitCategories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getSplitCategories"
                        }
                    ]
                },
                {
                    "name": "splitCategories$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "StatusState.getSplitCategories"
                        }
                    ]
                },
                {
                    "name": "splitIdx",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "splitMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getSplitMode"
                        }
                    ]
                },
                {
                    "name": "splitMode$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "StatusState.getSplitMode"
                        }
                    ]
                },
                {
                    "name": "tempObservable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "this.unsubscribe.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "worker",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Worker[]",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkIfAdditionalLoading",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "urls",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "urls",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayTheFirstImage",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRemainedImageList",
                    "args": [
                        {
                            "name": "queryUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 252,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "queryUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeCacheData",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 363,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSave data into the cache",
                    "description": "<p>Save data into the cache</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeReadingRemainedImages",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "urls",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "urls",
                            "type": "literal type[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeTheFirstImage",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makingSplitWindow",
                    "args": [
                        {
                            "name": "queryUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "queryUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makingSplitWindowByGrid",
                    "args": [
                        {
                            "name": "eIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "eIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makingSplitWindowBySelectedSeries",
                    "args": [
                        {
                            "name": "cIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "cIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 445,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signalFinished",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ]
                },
                {
                    "name": "splitWindowProcess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 376,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "webworkerPostMessage",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "webWorkerProcess",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 328,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {CarouselService} from \"../../../services/carousel.service\";\r\nimport {ImageService} from \"../../../services/image.service\";\r\nimport {defer, EMPTY, from, Observable, of, Subject, zip} from \"rxjs\";\r\nimport {Select, Store} from \"@ngxs/store\";\r\nimport {\r\n  SetCurrentSplitOperation,\r\n  SetImageUrls,\r\n  SetIsImageLoaded,\r\n} from \"../../../../state/status/status.actions\";\r\nimport {filter, skip, switchMap, take, takeUntil, tap, toArray} from \"rxjs/operators\";\r\nimport {SelectSnapshot} from \"@ngxs-labs/select-snapshot\";\r\nimport {fromWorker} from \"observable-webworker\";\r\nimport {StatusState} from \"../../../../state/status/status.state\";\r\nimport {SeriesItemService} from \"../../series/series-item.service\";\r\nimport {CacheSeriesService} from \"../../../services/cashe-series.service\";\r\nimport {SplitService} from \"../../../services/split.service\";\r\nimport {ImageModel} from \"../../../models/data\";\r\n\r\n// export const category_list = ['animal', 'house', 'baby', 'forest', 'happiness', 'love', 'sea','banana', 'mountain']\r\n\r\n@Component({\r\n  selector: 'app-carousel-main',\r\n  template: `\r\n    <div class=\"w-auto h-auto\">\r\n      <carousel-main-display\r\n        [progress]=\"progress\"\r\n        [splitIdx]=\"splitIdx\"\r\n        [img]=\"image\">\r\n      </carousel-main-display>\r\n    </div>\r\n  `,\r\n  styles: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n\r\n})\r\nexport class CarouselMainComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @Input() set queryElement(el: string) {\r\n    // console.log('carousel-main input queryElement', el)\r\n    let idx;\r\n    if (el === 'element1') idx = 0;\r\n    if (el === 'element2') idx = 1;\r\n    if (el === 'element3') idx = 2;\r\n    if (el === 'element4') idx = 3;\r\n\r\n    this.makingSplitWindowByGrid(idx);\r\n  }\r\n\r\n  // to check if image loading is started from webworker.\r\n  @Select(StatusState.getIsImageLoaded) getIsImageLoaded$: Observable<any>;\r\n  @Select(StatusState.getSelectedImageById) getSelectedImageById$: Observable<ImageModel>;\r\n  @Select(StatusState.getSelectedSeriesById) getSelectedSeriesById$: Observable<number>;\r\n  @Select(StatusState.getIsSeriesLoaded) getIsSeriesLoaded$: Observable<boolean>;\r\n  //\r\n  @SelectSnapshot(StatusState.getCurrentCategory) currentCategory: string;\r\n  @SelectSnapshot(StatusState.getCategoryList) category_list: string[];\r\n  @SelectSnapshot(StatusState.getWebworkerWorkingStatus) getWebworkerWorkingStatus: boolean;\r\n  @Select(StatusState.getSeriesUrls) getSeriesUrls$: Observable<any>;\r\n  @Select(StatusState.getSplitMode) splitMode$: Observable<any>;\r\n  @SelectSnapshot(StatusState.getSplitMode) splitMode: number;\r\n  @SelectSnapshot(StatusState.getSplitAction) splitAction: boolean;\r\n  @SelectSnapshot(StatusState.getFocusedSplit) focusedSplitIdx: number;\r\n  @Select(StatusState.getCurrentSplitOperation) getCurrentSplitOperation$: Observable<{}>;\r\n  @Select(StatusState.getActiveSplit) activeSplit$: Observable<number>;\r\n  @SelectSnapshot(StatusState.getSplitCategories) splitCategories: string[];\r\n  @Select(StatusState.getSplitCategories) splitCategories$: Observable<string[]>;\r\n\r\n\r\n  private worker: Worker[] = [];\r\n  unsubscribe = new Subject();\r\n  unsubscribe$ = this.unsubscribe.asObservable();\r\n  category: string = 'animal';\r\n  categoryIdx: any = 0;\r\n  progress = {value: 0, category: 'animal'};\r\n  splitIdx = 0;\r\n  originalImage: any;\r\n  requestRenderingSplitWindow$: Observable<string>[] = [];\r\n  selectedSplitWindow = new Subject<string>();\r\n  tempObservable: Observable<any>;\r\n  image: any;\r\n\r\n  constructor(\r\n    private carouselService: CarouselService,\r\n    private imageService: ImageService,\r\n    private store: Store,\r\n    private splitService: SplitService,\r\n    private cdr: ChangeDetectorRef,\r\n    private seriesItemService: SeriesItemService,\r\n    private cacheSeriesService: CacheSeriesService,\r\n  ) {\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    // call from thumbnail-list, triggered by clicking image item.\r\n    // console.log('carousel-main Component ngOnInit')\r\n    /**\r\n     * Wait until displaying the first main image before series images are loaded\r\n     * This first image is came from the series list not from thumbnail image,\r\n     * because the thumbnail images are not ready to display\r\n     * */\r\n    this.getIsSeriesLoaded$.pipe(skip(1), takeUntil(this.unsubscribe$))\r\n      .subscribe(() => {\r\n        this.image = this.carouselService.getSelectedImageById('animal', 0);\r\n        this.progress = {\r\n          value: this.splitService.progress[this.category],\r\n          category: this.category\r\n        }\r\n        // const tImage = this.carouselService.getSelectedImageById('animal', 0);\r\n        // this.displaySplitWindowImage(tImage)\r\n      })\r\n\r\n    this.splitWindowProcess();\r\n\r\n    /** Display image at the main window whenever clinking thumbnail_item */\r\n    this.getSelectedImageById$.pipe(skip(1))\r\n      .subscribe(image => {\r\n        if (image.category !== this.category) return;\r\n        this.image = this.carouselService.getSelectedImageById(image.category, image.imageId);\r\n        this.progress = {\r\n          value: this.splitService.progress[image.category],\r\n          category: image.category\r\n        }\r\n        this.cdr.detectChanges();\r\n      })\r\n\r\n    /** New process start whenever clinking series_item */\r\n    this.getSelectedSeriesById$.pipe(\r\n      skip(1),\r\n      takeUntil(this.unsubscribe$),\r\n    ).subscribe((id: number) => {\r\n      /**\r\n       * Need to restrict display image to the focused split window only\r\n       * because all split window is activated when clicking select series\r\n       * or clicking split window\r\n       * */\r\n      if (this.focusedSplitIdx !== this.splitIdx) return;\r\n      this.makingSplitWindowBySelectedSeries(id);\r\n    });\r\n    /** Trigger from home.component when clicking selec */\r\n    this.splitCategories$.pipe(\r\n      skip(1),\r\n      takeUntil(this.unsubscribe$),\r\n    ).subscribe(category_list => {\r\n      this.category = category_list[this.splitIdx];\r\n    })\r\n  }\r\n\r\n  private makingSplitWindowByGrid(eIdx: number) {\r\n    this.category = this.splitCategories[eIdx];\r\n    /**\r\n     *  Initialize private values of each split window .\r\n     */\r\n    this.splitIdx = eIdx;\r\n    // this.imageCount[this.category] = Object.keys(this._queryUrl).length;\r\n    // console.log('image count', this.imageCount,this._queryUrl)\r\n    this.categoryIdx = this.category_list.findIndex(val => val === this.category);\r\n    this.splitService.selectedElement = this.splitService.elements[eIdx];\r\n    if (this.splitMode === 1) {\r\n      this.splitService.resetSplitWindowProcessing();\r\n    }\r\n    this.requestRenderingSplitWindow$[this.splitService.selectedElement] = of(this.splitService.selectedElement).pipe(take(1));\r\n    // console.log('-- requestRenderingSplitWindow$', this.requestRenderingSplitWindow$, this.splitService.selectedElement, eIdx);\r\n  }\r\n\r\n  private makingSplitWindowBySelectedSeries(cIdx: number) {\r\n    // console.log('image- 4',cIdx)\r\n    const category = this.category_list[cIdx];\r\n    //\r\n    const queryUrl = `assets/json/${category}.json`;\r\n    this.categoryIdx = this.category_list.findIndex(val => val === category);\r\n    this.makingSplitWindow(queryUrl, category);\r\n  }\r\n\r\n  private makingSplitWindow(queryUrl: string, category: string) {\r\n    this.webWorkerProcess(category);\r\n    this.getRemainedImageList(queryUrl);\r\n    this.makeTheFirstImage(category);\r\n  }\r\n\r\n\r\n  private makeTheFirstImage(category: string) {\r\n    this.getIsImageLoaded$ && this.getIsImageLoaded$.pipe(skip(1), take(1))\r\n      .subscribe(async () => {\r\n        /**\r\n         * Finished drawing the first image of all the images that was read from Internet\r\n         * based on the category.\r\n         * Make the end signal and send it to the waiting state to make the next grid start to\r\n         * drawing.\r\n         * */\r\n        await this.displayTheFirstImage(category);\r\n        await this.signalFinished();\r\n      })\r\n  }\r\n\r\n  private async signalFinished() {\r\n    return new Promise(resolve => {\r\n      this.splitService.isFinishedRendering[this.splitService.selectedElement].next(this.splitService.selectedElement)\r\n      resolve('')\r\n      setTimeout(() => {\r\n        if (this.worker[this.splitIdx]) {\r\n          this.worker[this.splitIdx].terminate();\r\n          this.worker[this.splitIdx] = undefined;\r\n          // console.log(' terimnate this.worker[this.splitIdx] ', this.splitIdx)\r\n        }\r\n        // if(this.worker[this.splitIdx] && this.splitAction ) this.worker[this.splitIdx].terminate();\r\n        /** Because each split window has it's own webworker, and this webworker will be remained\r\n         *  if it is not terminated immediately */\r\n      }, 5000);\r\n\r\n    })\r\n  }\r\n\r\n  private async displayTheFirstImage(category: string) {\r\n    return new Promise(resolve => {\r\n      this.splitService.isStartedRendering[this.splitService.selectedElement].next(this.splitService.selectedElement)\r\n      /**\r\n       * When change split mode, if image is not in the cached (based on category)\r\n       * then borrow image from series list, which is already cached.\r\n       * This technique is needed because image should be displayed immediately\r\n       */\r\n      const tImage = this.carouselService.getSelectedImageById(category, this.splitService.currentImageIndex[category]);\r\n      if (tImage !== '') {\r\n        // console.log('image-1', this.splitService.currentImageIndex[category])\r\n        // send data to the child component, carousel-main-display.component.\r\n        this.image = tImage;\r\n        this.progress = {\r\n          value: this.splitService.progress[category],\r\n          category: category\r\n        }\r\n        //\r\n      } else {\r\n        const image = this.cacheSeriesService.getCachedSeriesByCat(category);\r\n        if (image) this.image = image.blob;\r\n      }\r\n      this.cdr.detectChanges();\r\n      resolve('')\r\n    })\r\n  }\r\n\r\n  private getRemainedImageList(queryUrl: string) {\r\n    this.imageService.getTotalImageList(queryUrl)\r\n      .subscribe((val: any) => {\r\n        // image count for each category.\r\n        this.splitService.imageCount[this.category] = Object.keys(val).length;\r\n\r\n        const category = queryUrl.split('.')[0].split('/')[2];\r\n        //\r\n        const urls = this.imageService.getCacheUrls();\r\n        /** Try to display if there are any cached image before check if there are additional image to load  */\r\n        this.store.dispatch(new SetImageUrls([]));\r\n        this.store.dispatch(new SetIsImageLoaded({idx: 0}));\r\n        //\r\n        this.makeReadingRemainedImages(val, category, urls);\r\n        //\r\n\r\n      }, error => {\r\n        throw Error(error)\r\n      });\r\n  }\r\n\r\n\r\n  private makeReadingRemainedImages(val: any, category: string, urls: { idx: number; category: string; url: string }[]) {\r\n    this.checkIfAdditionalLoading(val, category, urls).then((res: any) => {\r\n      // console.log(' cat5-6 webworkerPostMessage-- val',  this._queryUrl, category)\r\n      if (res.length > 0) { // If there is remained url that need loading image\r\n        /** Send urls to webworker for loading images additionally */\r\n        this.webworkerPostMessage(res, category);\r\n      } else {\r\n        // this.progress[this.categoryIdx] = '';\r\n      }\r\n    });\r\n  }\r\n\r\n  checkIfAdditionalLoading(val: any, category: string, urls: { idx: number; category: string; url: string }[]) {\r\n    /** Check if image is cached already, then skip caching job\r\n     * or extract remained urls, which is needed loading image by using webworker */\r\n    return new Promise((resolve, reject) => {\r\n      const input$ = of({req: val, category, urls: urls});\r\n\r\n      if (!this.splitService.bWorker) {\r\n        this.splitService.bWorker = new Worker(new URL('../../../../assets/workers/additional-loading.worker', import.meta.url), {type: 'module'})\r\n      }\r\n      fromWorker<{}, string[]>(\r\n        () => this.splitService.bWorker,\r\n        input$,\r\n      ).subscribe(res => {\r\n        resolve(res)\r\n      }, error => reject(error))\r\n    });\r\n  }\r\n\r\n  private webworkerPostMessage(val: any, category: string) {\r\n    /**\r\n     * While changing split mode, need to restrict webworker action,\r\n     * because active split index is different from webworker index,\r\n     * webworker is running until it's timeout 5 sec is end, while drawing\r\n     * the first image of each split window is finished already.\r\n     * */\r\n    if (this.splitAction) return;\r\n    // console.log(' cat5-7 webworkerPostMessage-- val', val, val.length,this._queryUrl, category)\r\n    const data: any = {\r\n      msg: 'download',\r\n      body: val,\r\n      category: category\r\n    }\r\n    /** Send source data to webworker, which is the base data that needs background job */\r\n    if (this.worker[this.splitIdx]) {\r\n      this.worker[this.splitIdx].postMessage(data)\r\n    }\r\n    // this.worker[this.categoryIdx].postMessage(data)\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n  }\r\n\r\n  private webWorkerProcess(category: string) {\r\n    if (typeof Worker !== 'undefined') {\r\n      if (!this.worker[this.splitIdx]) {\r\n        // console.log('cat5-81', this.categoryIdx, this.splitIdx)\r\n        this.worker[this.splitIdx] = new Worker(new URL('../../../../assets/workers/carousel.worker.ts', import.meta.url));\r\n        this.worker[this.splitIdx].onmessage = (data: any) => {\r\n          //this.progress[category] = ((data.data.imageId + 1) / this.imageCount[this.categoryIdx] * 100).toFixed(0);\r\n          const prog = ((data.data.imageId + 1) / this.splitService.imageCount[category] * 100).toFixed(0);\r\n          if (!isNaN(parseInt(prog))) this.splitService.progress[category] = parseInt(prog);\r\n          this.progress = {\r\n            value: this.splitService.progress[category],\r\n            category: category\r\n          }\r\n          // console.log('category', this.splitService.progress, category, data.data.category, data.data.imageId, this.splitService.imageCount[category]);\r\n          this.cdr.markForCheck();\r\n          //\r\n          this.makeCacheData(data);\r\n          /**\r\n           * Send the signal of completing loading one image of all the images\r\n           * that was sent to webworker as bundle urls\r\n           * This means for being ready to receiving the next image\r\n           * */\r\n          const _data: any = {\r\n            msg: 'completeCachedImage',\r\n            body: data.data.url,\r\n            category: category\r\n          }\r\n          // console.log(' worker2', category, this.splitIdx)\r\n          this.worker[this.splitIdx].postMessage(JSON.parse(JSON.stringify(_data)))\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Save data into the cache */\r\n  private makeCacheData(data: any) {\r\n    this.imageService.makeCachedImage(data.data).pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(data => {\r\n        if (data) {\r\n          /** Triggering that every image is loading, then thumbnail list is updated continuously */\r\n          this.store.dispatch(new SetImageUrls([data.url]));\r\n          /** To show the first image in the main window */\r\n          this.store.dispatch(new SetIsImageLoaded({idx: data.imageId}));\r\n        }\r\n      });\r\n  }\r\n\r\n///////////////////////////////////////////////////\r\n  private splitWindowProcess() {\r\n    /**\r\n     * When it comes to rendering of split-windows,\r\n     * each window need to wait until the previous window finished rendering.\r\n     * -----------------\r\n     * 1. The end of processing of image in one of the split windows,\r\n     *    emit event of \"isStartedRendering$\" for each split window.\r\n     * 2. As soon as take the event of \"isStartedRendering$\" the next split window start processing .\r\n     * 3. This split window display the first image only and emit event of \"isFinishedRendering$\"\r\n     *    ,which means the next split window that was waiting the \"isFinishedRendering\" of previous\r\n     *    split window need to start processing.\r\n     * */\r\n      //\r\n    const isFinished$ = this.getCurrentSplitOperation$.pipe( // 1 To know the end of image processing\r\n        switchMap((val: any) => {\r\n          this.splitService.selectedElement = val.element; // 2\r\n          return this.splitService.isFinishedRendering$[val.element].pipe(take(1));\r\n        }),\r\n        take(1), // 3\r\n      );\r\n\r\n    const isStarted$ = this.getCurrentSplitOperation$.pipe( // 4 To know the start of image processing\r\n      switchMap((val: any) => {\r\n        this.splitService.selectedElement = val.element;\r\n        return this.splitService.isStartedRendering$[val.element].pipe(take(1));\r\n      }),\r\n      take(1),\r\n    );\r\n\r\n    if (this.splitMode > 1) {\r\n      if (this.splitService.selectedElement === 'element1') { // 5 first split window\r\n        this.tempObservable = defer(() => of(EMPTY).pipe());\r\n      } else if (this.splitService.selectedElement === 'element2') {\r\n        this.tempObservable = zip(isStarted$, isFinished$).pipe( //['element2','element1']\r\n          filter((val: any) => val[1] === 'element1') // 6\r\n        );\r\n      } else if (this.splitService.selectedElement === 'element3') {\r\n        this.tempObservable = zip(isStarted$, isFinished$).pipe( //['element3','element2']\r\n          filter((val: any) => val[1] === 'element2'),\r\n        );\r\n      } else if (this.splitService.selectedElement === 'element4') {\r\n        this.tempObservable = zip(isStarted$, isFinished$).pipe( //['element4','element3']\r\n          filter((val: any) => val[1] === 'element3'),\r\n        );\r\n      }\r\n    } else {\r\n      this.tempObservable = defer(() => of(EMPTY).pipe()); // 7\r\n    }\r\n    ////\r\n    const rendering$: Observable<any> = this.requestRenderingSplitWindow$[this.splitService.selectedElement];\r\n    // 8\r\n    zip(this.tempObservable, rendering$).pipe( // 9\r\n      // tap( val => console.log(' tempObsevable, rendering$ -2', this.tempObservable, rendering$, this.categoryIdx)),\r\n      take(1),\r\n    ).subscribe(([temp, element]) => {\r\n      /** Start processing next window after finished processing for previous split window*/\r\n      const idx = this.splitService.elements.findIndex(val => val === element)\r\n      this.splitService.selectedElement = element;\r\n      /** When change split mode, need to set the first signal to prepare processing\r\n       * because each split window do process one by one */\r\n      this.store.dispatch(new SetCurrentSplitOperation({element: this.splitService.selectedElement}));\r\n      // console.log('cat5-4 ',  this.categoryIdx);\r\n      this.makingSplitWindowBySelectedSeries(this.categoryIdx); // 10\r\n    });\r\n\r\n  }\r\n\r\n///////////////////////////////////////////////////////\r\n\r\n  ngOnDestroy() {\r\n    this.unsubscribe.next({});\r\n    this.unsubscribe.complete();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "carouselService",
                        "type": "CarouselService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "imageService",
                        "type": "ImageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "splitService",
                        "type": "SplitService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "seriesItemService",
                        "type": "SeriesItemService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cacheSeriesService",
                        "type": "CacheSeriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 91,
                "jsdoctags": [
                    {
                        "name": "carouselService",
                        "type": "CarouselService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imageService",
                        "type": "ImageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "splitService",
                        "type": "SplitService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "seriesItemService",
                        "type": "SeriesItemService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cacheSeriesService",
                        "type": "CacheSeriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "queryElement": {
                    "name": "queryElement",
                    "setSignature": {
                        "name": "queryElement",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "el",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 49,
                        "jsdoctags": [
                            {
                                "name": "el",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "CarouselMainDisplayComponent",
            "id": "component-CarouselMainDisplayComponent-1755eed82a6b49e430238b79b7bf87648cc1755dfc388d96c8bd37642c56d8deb08e8655876ddb4f4b86bd03ed45369562f1c514290783ef403eda53e2abaf0f",
            "file": "src/app/components/carousel/carousel-main/carousel-main-display/carousel-main-display.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "carousel-main-display",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"m-1\">\n  <mat-progress-bar mode=\"determinate\" [value]=\"_progress\"></mat-progress-bar>\n</div>\n<div class=\"\">\n  <div class=\"m-1\">\n    <img class=\"object-scale-down\" #img>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "progress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "splitIdx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_progress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "focusedSplitIdx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getFocusedSplit"
                        }
                    ]
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'img'"
                        }
                    ]
                },
                {
                    "name": "splitAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getSplitAction"
                        }
                    ]
                },
                {
                    "name": "splitMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getSplitMode"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "displaySplitWindowImage",
                    "args": [
                        {
                            "name": "image",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "image",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleKey",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keydown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nextImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prevImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostListener,\n  Input,\n  OnInit,\n  ViewChild\n} from '@angular/core';\nimport {SelectSnapshot} from \"@ngxs-labs/select-snapshot\";\nimport {StatusState} from \"../../../../../state/status/status.state\";\nimport {CarouselService} from \"../../../../services/carousel.service\";\nimport {SetSelectedSplitWindowId, SetSplitAction} from \"../../../../../state/status/status.actions\";\nimport {SplitService} from \"../../../../services/split.service\";\nimport {Store} from \"@ngxs/store\";\n\n@Component({\n  selector: 'carousel-main-display',\n  template: `\n    <div class=\"m-1\">\n      <mat-progress-bar mode=\"determinate\" [value]=\"_progress\"></mat-progress-bar>\n    </div>\n    <div class=\"\">\n      <div class=\"m-1\">\n        <img class=\"object-scale-down\" #img>\n      </div>\n    </div>\n  `,\n  styles: [\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CarouselMainDisplayComponent {\n  @Input() set progress (v: any) {\n    // console.log('progress',v)\n    this._progress = v.value\n  }\n  @Input() set img (v: any) {\n    if(this.image) this.image.nativeElement.src = v;\n  }\n  @Input() splitIdx: number;\n  @Input() category: string;\n\n  @ViewChild('img') image: ElementRef;\n  @SelectSnapshot(StatusState.getSplitMode) splitMode: number;\n  @SelectSnapshot(StatusState.getSplitAction) splitAction: boolean;\n  @SelectSnapshot(StatusState.getFocusedSplit) focusedSplitIdx: number;\n\n  _progress: number;\n  @HostListener('window:keydown', ['$event'])\n  handleKey(event: KeyboardEvent) {\n    if (event.key === 'ArrowRight') this.nextImage();\n    if (event.key === 'ArrowLeft') this.prevImage();\n  }\n\n  constructor(\n    private carouselService: CarouselService,\n    private splitService: SplitService,\n    private cdr: ChangeDetectorRef,\n    private store: Store\n  ) { }\n\n  nextImage() {\n    if( this.splitIdx !== this.focusedSplitIdx && !this.splitAction) return\n\n    const image = this.carouselService.getNextImage(this.category, this.splitService.selectedElement);\n    this.displaySplitWindowImage(image);\n  }\n  prevImage() {\n    if( this.splitIdx !== this.focusedSplitIdx && !this.splitAction) return\n\n    const image = this.carouselService.getPrevImage(this.category, this.splitService.selectedElement);\n    this.displaySplitWindowImage(image);\n  }\n  private displaySplitWindowImage(image: any) {\n    // console.log('-- displaySplitWindowImage -3 this.focusedSplitIdx, this.splitIdx, this.splitAction', this.focusedSplitIdx, this.splitIdx, this.splitAction)\n    if( this.splitIdx !== this.focusedSplitIdx && !this.splitAction) {\n      return\n    }\n    // this.image.nativeElement.src = image;\n    this.image = image;\n    this.cdr.detectChanges();\n    /** To focus on the selected split window as the first window */\n    this.store.dispatch(new SetSelectedSplitWindowId('element1'));\n\n    /**\n     * 1. In case, window is opened by split mode action,\n     * 2. and user clicked arrow button,\n     * 3. this time splitAction is true\n     * 4. reset splitAction false when the last split window is displayed.\n     * this can protect abnormal display\n     * */\n    if( this.splitAction === true ) {\n      const splitIdx = this.splitService.elements.findIndex((val:any) => val === this.splitService.selectedElement)\n      // console.log(' displaySplitWindowImage -4 splitIdx', splitIdx);\n      if( this.splitMode -1  === splitIdx)\n        this.store.dispatch(new SetSplitAction(false));\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "carouselService",
                        "type": "CarouselService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "splitService",
                        "type": "SplitService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "carouselService",
                        "type": "CarouselService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "splitService",
                        "type": "SplitService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "progress": {
                    "name": "progress",
                    "setSignature": {
                        "name": "progress",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "img": {
                    "name": "img",
                    "setSignature": {
                        "name": "img",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "DisplayGridComponent",
            "id": "component-DisplayGridComponent-bac05689454d7348d01a8b823fba05b023c17b58a08720bc8650fe93afcf7d49a480e3ee0df343fff8ef066282bc3893743b6256517570c7685eca6c1dcfcae8",
            "file": "src/app/components/grid/display-grid/display-grid.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "display-grid",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <mat-grid-list cols=\"{{mcols}}\" rowHeight=\"{{mheight}}\" >\n    <mat-grid-tile\n      *ngFor=\"let tile of tiles\"\n      [colspan]=\"tile.cols\"\n      [rowspan]=\"tile.rows\"\n    >\n      <div\n           [selectColor]=\"tile.templateName\"\n           [selectedTemplate]=\"selectedTemplate\"\n           (selectTemplate) = \"clickSelectTemplate($event)\"\n            style=\"width: 100%; height: 100%\">\n        <display-grid-template [templateName]=\"tile.templateName\"\n                               [templateHeight]=\"tile.mheight\"\n                               [selectedTemplate]=\"selectedTemplate\">\n        </display-grid-template>\n      </div>\n    </mat-grid-tile>\n  </mat-grid-list>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "splitMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectTpl",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "mcols",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "mheight",
                    "defaultValue": "'82vh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "selectedTemplate",
                    "defaultValue": "this.tiles[0].templateName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "tiles",
                    "defaultValue": "[...this.tiles1]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile[]",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "tiles1",
                    "defaultValue": "[\r\n    {mcols: 1, mheight: '82vh', mwidth: '100%', cols: 1, rows: 1, templateName: 'element1'},\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile[]",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "tiles2",
                    "defaultValue": "[\r\n    {mcols: 2, mheight: '82vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element1'},\r\n    {mcols: 2, mheight: '82vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element2'},\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile[]",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "tiles3",
                    "defaultValue": "[\r\n    {mcols: 2, mheight: '82vh', mwidth: '50%', cols: 1, rows: 2, templateName: 'element1'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element2'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element3'},\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile[]",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "tiles4",
                    "defaultValue": "[\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element1'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element2'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element3'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element4'},\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile[]",
                    "optional": false,
                    "description": "",
                    "line": 80
                }
            ],
            "methodsClass": [
                {
                    "name": "clickSelectTemplate",
                    "args": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy, ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output, SimpleChanges\r\n} from \"@angular/core\";\r\n\r\nexport interface Tile {\r\n  mcols: number;\r\n  mheight: string;\r\n  mwidth: string;\r\n  cols: number;\r\n  rows: number;\r\n  templateName: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'display-grid',\r\n  template: `\r\n    <div>\r\n      <mat-grid-list cols=\"{{mcols}}\" rowHeight=\"{{mheight}}\" >\r\n        <mat-grid-tile\r\n          *ngFor=\"let tile of tiles\"\r\n          [colspan]=\"tile.cols\"\r\n          [rowspan]=\"tile.rows\"\r\n        >\r\n          <div\r\n               [selectColor]=\"tile.templateName\"\r\n               [selectedTemplate]=\"selectedTemplate\"\r\n               (selectTemplate) = \"clickSelectTemplate($event)\"\r\n                style=\"width: 100%; height: 100%\">\r\n            <display-grid-template [templateName]=\"tile.templateName\"\r\n                                   [templateHeight]=\"tile.mheight\"\r\n                                   [selectedTemplate]=\"selectedTemplate\">\r\n            </display-grid-template>\r\n          </div>\r\n        </mat-grid-tile>\r\n      </mat-grid-list>\r\n    </div>\r\n  `,\r\n  styles: [\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DisplayGridComponent {\r\n  @Output() selectTpl = new EventEmitter<any>();\r\n  @Input() set splitMode ( val: number) {\r\n    if (val === 1) {\r\n      this.tiles = [...this.tiles1];\r\n    } else if (val === 2) {\r\n      this.tiles = [...this.tiles2];\r\n    } else if( val === 3) {\r\n      this.tiles = [...this.tiles3];\r\n    } else if( val === 4)  {\r\n      this.tiles = [...this.tiles4];\r\n    }\r\n    this.mcols = this.tiles[this.tiles.length - 1].mcols;\r\n    this.mheight = this.tiles[this.tiles.length - 1].mheight;\r\n    // this.store.dispatch(new SetSplitAction(true));\r\n    this.cdr.detectChanges();\r\n  }\r\n  mcols = 1;\r\n  mheight = '82vh';\r\n  tiles1: Tile[] = [\r\n    {mcols: 1, mheight: '82vh', mwidth: '100%', cols: 1, rows: 1, templateName: 'element1'},\r\n  ];\r\n  tiles2: Tile[] = [\r\n    {mcols: 2, mheight: '82vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element1'},\r\n    {mcols: 2, mheight: '82vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element2'},\r\n  ];\r\n  tiles3: Tile[] = [\r\n    {mcols: 2, mheight: '82vh', mwidth: '50%', cols: 1, rows: 2, templateName: 'element1'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element2'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element3'},\r\n  ];\r\n  tiles4: Tile[] = [\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element1'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element2'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element3'},\r\n    {mcols: 2, mheight: '41vh', mwidth: '50%', cols: 1, rows: 1, templateName: 'element4'},\r\n  ];\r\n  tiles: Tile[] = [...this.tiles1];\r\n\r\n  selectedTemplate: string = this.tiles[0].templateName;\r\n\r\n  constructor( private cdr: ChangeDetectorRef) {\r\n  }\r\n\r\n  clickSelectTemplate(ev?: any) {\r\n    this.selectedTemplate = ev;\r\n    let idx;\r\n    if( ev === 'element1' ) idx = 0;\r\n    if( ev === 'element2' ) idx = 1;\r\n    if( ev === 'element3' ) idx = 2;\r\n    if( ev === 'element4' ) idx = 3;\r\n    this.selectTpl.emit({element: ev, idx});\r\n    // this.store.dispatch(new SetFocusedSplit(idx));\r\n    // this.store.dispatch(new SetSplitAction(false));\r\n    //\r\n    // this.carouselService.getNextImage(this.currentCategory, this.splitService.selectedElement);\r\n    // this.splitService.selectedElement = ev;\r\n\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 88,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "splitMode": {
                    "name": "splitMode",
                    "setSignature": {
                        "name": "splitMode",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "DisplayGridTemplateComponent",
            "id": "component-DisplayGridTemplateComponent-9fe464a262c19ca12379b3a89951189486b3c4d50a0786201e27b355bcf0e5551f2508aa9768d6ec1ef661ada4bd20b3809b0ace78af9ab4d2332c6384fc1785",
            "file": "src/app/components/grid/display-grid/display-grid-template.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "display-grid-template",
            "styleUrls": [],
            "styles": [],
            "template": "<div >\n  <ng-container  [ngTemplateOutlet]=\"onGetTemplate(_templateName)\"\n                 [ngTemplateOutletContext]=\"{height:_templateHeight,\n                                selectedTemplate:_selectedTemplate}\"\n  ></ng-container>\n</div>\n<app-grid-template #gridTemplate ></app-grid-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectedTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "templateHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "templateName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_selectedTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "_templateHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "_templateName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "gridTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GridTemplateComponent",
                    "optional": true,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'gridTemplate', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onGetTemplate",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ViewChild\r\n} from \"@angular/core\";\r\nimport {GridTemplateComponent} from \"../grid-template/grid-template.component\";\r\n\r\n@Component({\r\n  selector: 'display-grid-template',\r\n  template: `\r\n    <div >\r\n      <ng-container  [ngTemplateOutlet]=\"onGetTemplate(_templateName)\"\r\n                     [ngTemplateOutletContext]=\"{height:_templateHeight,\r\n                                    selectedTemplate:_selectedTemplate}\"\r\n      ></ng-container>\r\n    </div>\r\n    <app-grid-template #gridTemplate ></app-grid-template>\r\n  `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DisplayGridTemplateComponent {\r\n  @Input() set templateName (v: string) {\r\n    this._templateName = v;\r\n    this.cdr.detectChanges();\r\n  };\r\n  @Input() set templateHeight(v: string) {\r\n    this._templateHeight = v;\r\n    this.cdr.detectChanges();\r\n  };\r\n  @Input() set selectedTemplate(v: string) {\r\n    this._selectedTemplate = v;\r\n    this.cdr.detectChanges();\r\n  };\r\n  _templateName: string;\r\n  _templateHeight: string;\r\n  _selectedTemplate: string;\r\n  @ViewChild('gridTemplate', { static: true }) gridTemplate?: GridTemplateComponent;\r\n  constructor(private cdr: ChangeDetectorRef) {\r\n  }\r\n  onGetTemplate(name: string) {\r\n    return  this.gridTemplate?.getTemplate(name);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "templateName": {
                    "name": "templateName",
                    "setSignature": {
                        "name": "templateName",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "templateHeight": {
                    "name": "templateHeight",
                    "setSignature": {
                        "name": "templateHeight",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "selectedTemplate": {
                    "name": "selectedTemplate",
                    "setSignature": {
                        "name": "selectedTemplate",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "GridMenuComponent",
            "id": "component-GridMenuComponent-027021f9e00f3d2296b7bf1df99bc3762958cd7e63f456c78db910df1c7c530b491fe7c5b2dec5fcff09172046e90d373181b4870345042bae92829ef33bd265",
            "file": "src/app/components/grid/grid-menu/grid-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "grid-menu",
            "styleUrls": [],
            "styles": [
                "\n    .window_layout{\n      width: 24px;\n      height: 24px;\n      margin-right: 19px;\n      display: inline-block;\n    }\n\n    .split_menu {\n      display: flex;\n      flex-direction : row;\n      justify-content: flex-start;\n      align-items: center;\n      margin-right: 5px;\n    }\n\n  "
            ],
            "template": "<button mat-icon-button [matMenuTriggerFor]=\"menu3\" aria-label=\"split\" id=\"icon_split\"\n        class=\"tools-btn expanded-menu\" >\n  <img src=\"{{isAriaExpanded('icon_split')}}\" title=\"Split Window\" alt=\"Split Window\"\n       class=\"tools-icon-button\">\n</button>\n<mat-menu #menu3=\"matMenu\">\n  <button mat-menu-item (click)=\"onClickWindowSplit(1)\">\n    <div class=\"split_menu\">\n      <!-- <img src=\"assets/button-icons/menu/iloveimg-resized/block.svg\" alt=\"1\" class=\"window_layout\"> -->\n      <img src=\"assets/split_window_icon/icon_one.svg\" alt=\"1\" class=\"window_layout\">\n      <span class=\"layout\">1</span>\n    </div>\n  </button>\n  <button mat-menu-item (click)=\"onClickWindowSplit(2)\">\n    <div class=\"split_menu\">\n      <img src=\"assets/split_window_icon/icon_two.svg\" alt=\"1 X 1\" class=\"window_layout\">\n      <span class=\"layout\">1 x 1</span>\n    </div>\n  </button>\n  <button mat-menu-item (click)=\"onClickWindowSplit(3)\">\n    <div class=\"split_menu\">\n      <!-- <img src=\"assets/button-icons/menu/one_by_two.svg\" alt=\"1 X 2\" class=\"window_layout\"> -->\n      <img src=\"assets/split_window_icon/icon_three.svg\" alt=\"1 X 2\" class=\"window_layout\">\n      <span class=\"layout\">1 x 2</span>\n    </div>\n  </button>\n  <button mat-menu-item (click)=\"onClickWindowSplit(4)\" class=\"split_menu\">\n    <div class=\"split_menu\">\n      <img src=\"assets/split_window_icon/icon_four.svg\" alt=\"2 X 2\" class=\"window_layout\">\n      <span class=\"layout\">2 x 2</span>\n    </div>\n  </button>\n</mat-menu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "selectMode",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isAriaExpanded",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickWindowSplit",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'grid-menu',\n  template: `\n    <button mat-icon-button [matMenuTriggerFor]=\"menu3\" aria-label=\"split\" id=\"icon_split\"\n            class=\"tools-btn expanded-menu\" >\n      <img src=\"{{isAriaExpanded('icon_split')}}\" title=\"Split Window\" alt=\"Split Window\"\n           class=\"tools-icon-button\">\n    </button>\n    <mat-menu #menu3=\"matMenu\">\n      <button mat-menu-item (click)=\"onClickWindowSplit(1)\">\n        <div class=\"split_menu\">\n          <!-- <img src=\"assets/button-icons/menu/iloveimg-resized/block.svg\" alt=\"1\" class=\"window_layout\"> -->\n          <img src=\"assets/split_window_icon/icon_one.svg\" alt=\"1\" class=\"window_layout\">\n          <span class=\"layout\">1</span>\n        </div>\n      </button>\n      <button mat-menu-item (click)=\"onClickWindowSplit(2)\">\n        <div class=\"split_menu\">\n          <img src=\"assets/split_window_icon/icon_two.svg\" alt=\"1 X 1\" class=\"window_layout\">\n          <span class=\"layout\">1 x 1</span>\n        </div>\n      </button>\n      <button mat-menu-item (click)=\"onClickWindowSplit(3)\">\n        <div class=\"split_menu\">\n          <!-- <img src=\"assets/button-icons/menu/one_by_two.svg\" alt=\"1 X 2\" class=\"window_layout\"> -->\n          <img src=\"assets/split_window_icon/icon_three.svg\" alt=\"1 X 2\" class=\"window_layout\">\n          <span class=\"layout\">1 x 2</span>\n        </div>\n      </button>\n      <button mat-menu-item (click)=\"onClickWindowSplit(4)\" class=\"split_menu\">\n        <div class=\"split_menu\">\n          <img src=\"assets/split_window_icon/icon_four.svg\" alt=\"2 X 2\" class=\"window_layout\">\n          <span class=\"layout\">2 x 2</span>\n        </div>\n      </button>\n    </mat-menu>\n  `,\n  styles: [`\n    .window_layout{\n      width: 24px;\n      height: 24px;\n      margin-right: 19px;\n      display: inline-block;\n    }\n\n    .split_menu {\n      display: flex;\n      flex-direction : row;\n      justify-content: flex-start;\n      align-items: center;\n      margin-right: 5px;\n    }\n\n  `]\n})\nexport class GridMenuComponent implements OnInit {\n  @Output() selectMode = new EventEmitter<any>();\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n  onClickWindowSplit(no: number) {\n    this.selectMode.emit({mode: no});\n    const element = document.getElementById('icon_split');\n    element.setAttribute('aria-expanded','false');\n  }\n  isAriaExpanded( id: string) {\n    const element = document.getElementById(id)\n    const x = element?.getAttribute('aria-expanded');\n    return x === 'true'?\n      `assets/icon_split/${id}_black.svg`\n      : `assets/icon_split/${id}_white.svg`;\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .window_layout{\n      width: 24px;\n      height: 24px;\n      margin-right: 19px;\n      display: inline-block;\n    }\n\n    .split_menu {\n      display: flex;\n      flex-direction : row;\n      justify-content: flex-start;\n      align-items: center;\n      margin-right: 5px;\n    }\n\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 59
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "GridTemplateComponent",
            "id": "component-GridTemplateComponent-453819bb904cf6121048477b7d68be90c7e302c4178adb517fffffeee89e4674ec6f0aea4c22a95b35e206b946e310579d523d7db4883c92cd897799543adcca",
            "file": "src/app/components/grid/grid-template/grid-template.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-grid-template",
            "styleUrls": [],
            "styles": [
                "\n    .fab-bottom-left {\n      position: absolute;\n      left: 16px;\n      top: 45%;\n      bottom: 55%;\n      z-index: 100;\n    }\n    .fab-bottom-right {\n      position: absolute;\n      right: 16px;\n      top: 45%;\n      bottom: 55%;\n      z-index: 100;\n    }\n  "
            ],
            "template": "    <ng-template [appGridTemplate]=\"'element1'\" let-height=height let-name=selectedTemplate>\n      <!-- to get proper template -->\n      <div [style.height]=\"height\">\n        <div>\n          <!--          <button [disabled]=\"selectedSplit[0]\" mat-mini-fab class=\"fab-bottom-left\"-->\n<!--          <button [disabled]=\"onCheckSelectedTemplate('element1', name)\" mat-mini-fab class=\"fab-bottom-left\"-->\n          <button [disabled]=\"'element1' !== name\" mat-mini-fab class=\"fab-bottom-left\"\n                  matTooltip=\"Can use arrow keys\"\n                  [matTooltipPosition]=\"'above'\"\n                  (click)=\"onLeftArrowButton('element1')\">\n            <mat-icon>keyboard_arrow_left</mat-icon>\n          </button>\n          <button [disabled]=\"'element1' !== name\" mat-mini-fab class=\"fab-bottom-right\"\n                  matTooltip=\"Can use arrow keys\"\n                  [matTooltipPosition]=\"'above'\"\n                  (click)=\"onRightArrowButton('element1')\">\n            <mat-icon>keyboard_arrow_right</mat-icon>\n          </button>\n        </div>\n        <app-carousel-main [queryElement]=\"'element1'\">  <!-- to make observable of making split window -->\n        </app-carousel-main>\n      </div>\n    </ng-template>\n    <ng-template [appGridTemplate]=\"'element2'\" let-height=height let-name=selectedTemplate>\n      <div [style.height]=\"height\">\n        <div>\n          <button [disabled]=\"'element2' !== name\" mat-mini-fab class=\"fab-bottom-left\"\n                  matTooltip=\"Can use arrow keys\"\n                  [matTooltipPosition]=\"'above'\"\n                  (click)=\"onLeftArrowButton('element2')\">\n            <mat-icon>keyboard_arrow_left</mat-icon>\n          </button>\n          <button [disabled]=\"'element2' !== name\" mat-mini-fab class=\"fab-bottom-right\"\n                  matTooltip=\"Can use arrow keys\"\n                  [matTooltipPosition]=\"'above'\"\n                  (click)=\"onRightArrowButton('element2')\">\n            <mat-icon>keyboard_arrow_right</mat-icon>\n          </button>\n        </div>\n        <app-carousel-main [queryElement]=\"'element2'\">\n        </app-carousel-main>\n      </div>\n    </ng-template>\n    <ng-template [appGridTemplate]=\"'element3'\" let-height=height let-name=selectedTemplate>\n      <div [style.height]=\"height\">\n        <div>\n          <button [disabled]=\"'element3' !== name\" mat-mini-fab class=\"fab-bottom-left\"\n                  matTooltip=\"Can use arrow keys\"\n                  [matTooltipPosition]=\"'above'\"\n                  (click)=\"onLeftArrowButton('element3')\">\n            <mat-icon>keyboard_arrow_left</mat-icon>\n          </button>\n          <button [disabled]=\"'element3' !== name\" mat-mini-fab class=\"fab-bottom-right\"\n                  matTooltip=\"Can use arrow keys\"\n                  [matTooltipPosition]=\"'above'\"\n                  (click)=\"onRightArrowButton('element3')\">\n            <mat-icon>keyboard_arrow_right</mat-icon>\n          </button>\n        </div>\n        <app-carousel-main [queryElement]=\"'element3'\">\n        </app-carousel-main>\n      </div>\n    </ng-template>\n    <ng-template [appGridTemplate]=\"'element4'\" let-height=height let-name=selectedTemplate>\n      <div [style.height]=\"height\">\n        <div>\n          <button [disabled]=\"'element4' !== name\" mat-mini-fab class=\"fab-bottom-left\"\n                  matTooltip=\"Can use arrow keys\"\n                  [matTooltipPosition]=\"'above'\"\n                  (click)=\"onLeftArrowButton('element4')\">\n            <mat-icon>keyboard_arrow_left</mat-icon>\n          </button>\n          <button [disabled]=\"'element4' !== name\" mat-mini-fab class=\"fab-bottom-right\"\n                  matTooltip=\"Can use arrow keys\"\n                  [matTooltipPosition]=\"'above'\"\n                  (click)=\"onRightArrowButton('element4')\">\n            <mat-icon>keyboard_arrow_right</mat-icon>\n          </button>\n        </div>\n        <app-carousel-main [queryElement]=\"'element4'\">\n        </app-carousel-main>\n      </div>\n    </ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 128,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getCurrentCategory"
                        }
                    ]
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<GridTemplateDirective> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 127,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "GridTemplateDirective"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getTemplate",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TemplateRef<any>",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLeftArrowButton",
                    "args": [
                        {
                            "name": "element",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRightArrowButton",
                    "args": [
                        {
                            "name": "element",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component, OnChanges,\r\n  OnInit,\r\n  QueryList, SimpleChanges,\r\n  TemplateRef,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport {GridTemplateDirective} from \"../grid-directives/grid-template.directive\";\r\nimport {Select, Store} from \"@ngxs/store\";\r\nimport {SelectedGridTemplate, SetFocusedSplit, SetSplitAction} from \"../../../../state/status/status.actions\";\r\nimport {CarouselService} from \"../../../services/carousel.service\";\r\nimport {SplitService} from \"../../../services/split.service\";\r\nimport {StatusState} from \"../../../../state/status/status.state\";\r\nimport {Observable} from \"rxjs\";\r\nimport {SelectSnapshot} from \"@ngxs-labs/select-snapshot\";\r\n\r\n@Component({\r\n  selector: 'app-grid-template',\r\n  template: `\r\n    <ng-template [appGridTemplate]=\"'element1'\" let-height=height let-name=selectedTemplate>\r\n      <!-- to get proper template -->\r\n      <div [style.height]=\"height\">\r\n        <div>\r\n          <!--          <button [disabled]=\"selectedSplit[0]\" mat-mini-fab class=\"fab-bottom-left\"-->\r\n<!--          <button [disabled]=\"onCheckSelectedTemplate('element1', name)\" mat-mini-fab class=\"fab-bottom-left\"-->\r\n          <button [disabled]=\"'element1' !== name\" mat-mini-fab class=\"fab-bottom-left\"\r\n                  matTooltip=\"Can use arrow keys\"\r\n                  [matTooltipPosition]=\"'above'\"\r\n                  (click)=\"onLeftArrowButton('element1')\">\r\n            <mat-icon>keyboard_arrow_left</mat-icon>\r\n          </button>\r\n          <button [disabled]=\"'element1' !== name\" mat-mini-fab class=\"fab-bottom-right\"\r\n                  matTooltip=\"Can use arrow keys\"\r\n                  [matTooltipPosition]=\"'above'\"\r\n                  (click)=\"onRightArrowButton('element1')\">\r\n            <mat-icon>keyboard_arrow_right</mat-icon>\r\n          </button>\r\n        </div>\r\n        <app-carousel-main [queryElement]=\"'element1'\">  <!-- to make observable of making split window -->\r\n        </app-carousel-main>\r\n      </div>\r\n    </ng-template>\r\n    <ng-template [appGridTemplate]=\"'element2'\" let-height=height let-name=selectedTemplate>\r\n      <div [style.height]=\"height\">\r\n        <div>\r\n          <button [disabled]=\"'element2' !== name\" mat-mini-fab class=\"fab-bottom-left\"\r\n                  matTooltip=\"Can use arrow keys\"\r\n                  [matTooltipPosition]=\"'above'\"\r\n                  (click)=\"onLeftArrowButton('element2')\">\r\n            <mat-icon>keyboard_arrow_left</mat-icon>\r\n          </button>\r\n          <button [disabled]=\"'element2' !== name\" mat-mini-fab class=\"fab-bottom-right\"\r\n                  matTooltip=\"Can use arrow keys\"\r\n                  [matTooltipPosition]=\"'above'\"\r\n                  (click)=\"onRightArrowButton('element2')\">\r\n            <mat-icon>keyboard_arrow_right</mat-icon>\r\n          </button>\r\n        </div>\r\n        <app-carousel-main [queryElement]=\"'element2'\">\r\n        </app-carousel-main>\r\n      </div>\r\n    </ng-template>\r\n    <ng-template [appGridTemplate]=\"'element3'\" let-height=height let-name=selectedTemplate>\r\n      <div [style.height]=\"height\">\r\n        <div>\r\n          <button [disabled]=\"'element3' !== name\" mat-mini-fab class=\"fab-bottom-left\"\r\n                  matTooltip=\"Can use arrow keys\"\r\n                  [matTooltipPosition]=\"'above'\"\r\n                  (click)=\"onLeftArrowButton('element3')\">\r\n            <mat-icon>keyboard_arrow_left</mat-icon>\r\n          </button>\r\n          <button [disabled]=\"'element3' !== name\" mat-mini-fab class=\"fab-bottom-right\"\r\n                  matTooltip=\"Can use arrow keys\"\r\n                  [matTooltipPosition]=\"'above'\"\r\n                  (click)=\"onRightArrowButton('element3')\">\r\n            <mat-icon>keyboard_arrow_right</mat-icon>\r\n          </button>\r\n        </div>\r\n        <app-carousel-main [queryElement]=\"'element3'\">\r\n        </app-carousel-main>\r\n      </div>\r\n    </ng-template>\r\n    <ng-template [appGridTemplate]=\"'element4'\" let-height=height let-name=selectedTemplate>\r\n      <div [style.height]=\"height\">\r\n        <div>\r\n          <button [disabled]=\"'element4' !== name\" mat-mini-fab class=\"fab-bottom-left\"\r\n                  matTooltip=\"Can use arrow keys\"\r\n                  [matTooltipPosition]=\"'above'\"\r\n                  (click)=\"onLeftArrowButton('element4')\">\r\n            <mat-icon>keyboard_arrow_left</mat-icon>\r\n          </button>\r\n          <button [disabled]=\"'element4' !== name\" mat-mini-fab class=\"fab-bottom-right\"\r\n                  matTooltip=\"Can use arrow keys\"\r\n                  [matTooltipPosition]=\"'above'\"\r\n                  (click)=\"onRightArrowButton('element4')\">\r\n            <mat-icon>keyboard_arrow_right</mat-icon>\r\n          </button>\r\n        </div>\r\n        <app-carousel-main [queryElement]=\"'element4'\">\r\n        </app-carousel-main>\r\n      </div>\r\n    </ng-template>\r\n  `,\r\n  styles: [`\r\n    .fab-bottom-left {\r\n      position: absolute;\r\n      left: 16px;\r\n      top: 45%;\r\n      bottom: 55%;\r\n      z-index: 100;\r\n    }\r\n    .fab-bottom-right {\r\n      position: absolute;\r\n      right: 16px;\r\n      top: 45%;\r\n      bottom: 55%;\r\n      z-index: 100;\r\n    }\r\n  `],\r\n   // providers: [Store],\r\n   changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GridTemplateComponent {\r\n\r\n  @ViewChildren(GridTemplateDirective) templateRef: QueryList<GridTemplateDirective> | undefined;\r\n  @SelectSnapshot(StatusState.getCurrentCategory) currentCategory: string;\r\n  constructor(\r\n    private carouselService: CarouselService,\r\n    private store: Store,\r\n    private splitService: SplitService\r\n  ) {}\r\n\r\n  getTemplate( name: string): TemplateRef<any> {\r\n    // @ts-ignore\r\n    return  this.templateRef && this.templateRef.toArray().find( x => x.name === name)!.template;\r\n  }\r\n  onLeftArrowButton(element: string) {\r\n    this.store.dispatch(new SetSplitAction(false));\r\n    const idx = this.splitService.elements.findIndex(val => val === element);\r\n    this.carouselService.getPrevImage(this.currentCategory, element);\r\n    this.store.dispatch(new SetFocusedSplit(idx));\r\n    this.store.dispatch(new SelectedGridTemplate({templateName: element, button: 'left'}));\r\n  }\r\n  onRightArrowButton(element: string) {\r\n    this.store.dispatch(new SetSplitAction(false));\r\n    this.carouselService.getNextImage(this.currentCategory, element);\r\n    const idx = this.splitService.elements.findIndex(val => val === element);\r\n    this.store.dispatch(new SetFocusedSplit(idx));\r\n    this.store.dispatch(new SelectedGridTemplate({templateName: element, button: 'right'}));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .fab-bottom-left {\n      position: absolute;\n      left: 16px;\n      top: 45%;\n      bottom: 55%;\n      z-index: 100;\n    }\n    .fab-bottom-right {\n      position: absolute;\n      right: 16px;\n      top: 45%;\n      bottom: 55%;\n      z-index: 100;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "carouselService",
                        "type": "CarouselService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "splitService",
                        "type": "SplitService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 128,
                "jsdoctags": [
                    {
                        "name": "carouselService",
                        "type": "CarouselService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "splitService",
                        "type": "SplitService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-99a40bbce1e4029ba2b99f39223e397434c648832a081052539e1ea41a7eddaeaf36526aaa6ade6176ab674762d69548b6490d6ad34c98a53b5dbc2394cdf17a",
            "file": "src/app/components/home/home.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "home",
            "styleUrls": [],
            "styles": [],
            "template": "<grid-toolbar (selectMode)=\"onSelectMode($event)\"></grid-toolbar>\n<div class=\"w-auto\">\n  <div class=\"h-24\">\n    <div class=\"bg-blue-200\">\n      <div class=\"\">\n        <thumbnail-list [currentImages]=\"currentImages\"\n                        [selectedImage]=\"selectedImage\"\n                        (selectItem)=\"onSelectItem($event)\"  >\n        </thumbnail-list>\n      </div>\n    </div>\n  </div>\n  <div class=\"h-auto \">\n    <div class=\"mt-1\">\n      <div class=\"grid grid-cols-10 gap-2\">\n        <div class=\"h-auto col-span-1 bg-blue-100\">\n          <div class=\"mx-3 mt-2 mb-2 text-xl font-bold font-weight: 900\">Category</div>\n          <series-list [currentSeries]=\"currentSeries\"\n                        [selectedSeries]=\"selectedSeries\"\n                        (selectSeries)=\"onSelectSeries($event)\">\n          </series-list>\n        </div>\n        <div class=\"h-auto col-span-9 bg-red-100\">\n          <display-grid [splitMode]=\"splitMode\"\n                        (selectTpl)=\"onSelectTemplate($event)\" >\n          </display-grid>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "category_list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getCategoryList"
                        }
                    ]
                },
                {
                    "name": "currentCategory$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "StatusState.getCurrentCategory"
                        }
                    ]
                },
                {
                    "name": "currentImages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "currentSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "focusedSplit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getFocusedSplit"
                        }
                    ]
                },
                {
                    "name": "getImageUrls$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "StatusState.getImageUrls"
                        }
                    ]
                },
                {
                    "name": "selectedGridTemplate$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ISelectedGridTemplate> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "StatusState.getSelectedGridTemplate"
                        }
                    ]
                },
                {
                    "name": "selectedImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "selectedSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "seriesUrls$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "StatusState.getSeriesUrls"
                        }
                    ]
                },
                {
                    "name": "seriesWorker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Worker | undefined",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "split_category_list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "decorators": [
                        {
                            "name": "SelectSnapshot",
                            "stringifiedArguments": "StatusState.getSplitCategories"
                        }
                    ]
                },
                {
                    "name": "splitMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "this.unsubscribe.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "methodsClass": [
                {
                    "name": "initializeSeriesList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInitializing selected series for the first time",
                    "description": "<p>Initializing selected series for the first time</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectItem",
                    "args": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSelect thumbnail item by clicking",
                    "description": "<p>Select thumbnail item by clicking</p>\n",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectMode",
                    "args": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSelect split mode by clicking grid menu in the toolbar",
                    "description": "<p>Select split mode by clicking grid menu in the toolbar</p>\n",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectSeries",
                    "args": [
                        {
                            "name": "ev",
                            "type": "SeriesModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSelect series item by clicking category list",
                    "description": "<p>Select series item by clicking category list</p>\n",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "SeriesModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectTemplate",
                    "args": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSelect template by clicking one of the split windows",
                    "description": "<p>Select template by clicking one of the split windows</p>\n",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "seriesWorkerProcess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDisplay series image upon receiving series images that are updated by the webworker process",
                    "description": "<p>Display series image upon receiving series images that are updated by the webworker process</p>\n"
                },
                {
                    "name": "seriesWorkerSubProcess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUse webworker to not wait until series images are loaded\n",
                    "description": "<p>Use webworker to not wait until series images are loaded</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "thumbnailWorkerProcess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDisplay thumbnail item, whenever event triggering",
                    "description": "<p>Display thumbnail item, whenever event triggering</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\r\n// @ts-ignore\r\nimport {ISelectedGridTemplate, StatusState} from \"../../../state/status/status.state\";\r\nimport {Select, Store} from \"@ngxs/store\";\r\nimport {Observable, of, Subject} from \"rxjs\";\r\nimport {takeUntil} from \"rxjs/operators\";\r\nimport {CacheSeriesService} from \"../../services/cashe-series.service\";\r\nimport {fromWorker} from \"observable-webworker\";\r\nimport {ImageService} from \"../../services/image.service\";\r\nimport {SeriesItemService} from \"../series/series-item.service\";\r\nimport {\r\n  SetCurrentCategory,\r\n  SetFocusedSplit, SetImageUrls,\r\n  SetIsImageLoaded,\r\n  SetIsSeriesLoaded,\r\n  SetSelectedImageById, SetSelectedImageByUrl,\r\n  SetSelectedSeriesById,\r\n  SetSeriesUrls,\r\n  SetSplitAction, SetSplitCategory\r\n} from \"../../../state/status/status.actions\";\r\nimport {skip, tap} from \"rxjs/operators\";\r\nimport {SelectSnapshot} from \"@ngxs-labs/select-snapshot\";\r\nimport {SplitService} from \"../../services/split.service\";\r\nimport {ImageModel, SeriesModel} from \"../../models/data\";\r\n\r\n@Component({\r\n  selector: 'home',\r\n  template: `\r\n    <grid-toolbar (selectMode)=\"onSelectMode($event)\"></grid-toolbar>\r\n    <div class=\"w-auto\">\r\n      <div class=\"h-24\">\r\n        <div class=\"bg-blue-200\">\r\n          <div class=\"\">\r\n            <thumbnail-list [currentImages]=\"currentImages\"\r\n                            [selectedImage]=\"selectedImage\"\r\n                            (selectItem)=\"onSelectItem($event)\"  >\r\n            </thumbnail-list>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"h-auto \">\r\n        <div class=\"mt-1\">\r\n          <div class=\"grid grid-cols-10 gap-2\">\r\n            <div class=\"h-auto col-span-1 bg-blue-100\">\r\n              <div class=\"mx-3 mt-2 mb-2 text-xl font-bold font-weight: 900\">Category</div>\r\n              <series-list [currentSeries]=\"currentSeries\"\r\n                            [selectedSeries]=\"selectedSeries\"\r\n                            (selectSeries)=\"onSelectSeries($event)\">\r\n              </series-list>\r\n            </div>\r\n            <div class=\"h-auto col-span-9 bg-red-100\">\r\n              <display-grid [splitMode]=\"splitMode\"\r\n                            (selectTpl)=\"onSelectTemplate($event)\" >\r\n              </display-grid>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class HomeComponent implements OnInit, OnDestroy {\r\n  currentImages: any[];\r\n  selectedImage: any;\r\n  currentSeries: {series: SeriesModel[]};\r\n  selectedSeries: any;\r\n  splitMode: number | undefined;\r\n  unsubscribe = new Subject();\r\n  unsubscribe$ = this.unsubscribe.asObservable();\r\n  seriesWorker: Worker | undefined;\r\n  category: string | undefined;\r\n\r\n  @Select(StatusState.getImageUrls)  getImageUrls$: Observable<string[]>;\r\n  @Select(StatusState.getSelectedGridTemplate) selectedGridTemplate$: Observable<ISelectedGridTemplate> | undefined;\r\n  @Select(StatusState.getSeriesUrls) seriesUrls$: Observable<string[]>;\r\n  @Select(StatusState.getCurrentCategory) currentCategory$: Observable<string>;\r\n  //\r\n  @SelectSnapshot(StatusState.getCategoryList)  category_list: string[];\r\n  @SelectSnapshot(StatusState.getSplitCategories)  split_category_list: string[];\r\n  @SelectSnapshot(StatusState.getFocusedSplit)  focusedSplit: number;\r\n\r\n  constructor(\r\n    private cacheSeriesService: CacheSeriesService,\r\n    private imageService: ImageService,\r\n    private seriesItemService: SeriesItemService,\r\n    private store: Store,\r\n    private splitService: SplitService,\r\n    private cdr: ChangeDetectorRef\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    /** Display thumbnail list  */\r\n    this.thumbnailWorkerProcess();\r\n    /** Display series list  */\r\n    this.seriesWorkerProcess();\r\n    //\r\n    this.initializeSeriesList();\r\n  }\r\n  /** Initializing selected series for the first time */\r\n  initializeSeriesList() {\r\n    const initial_value = {\r\n      seriesId: 0,\r\n      url: '',\r\n      blob: '',\r\n      category: 'animal'\r\n    }\r\n    setTimeout(() => {\r\n      this.selectedSeries = initial_value;\r\n      /** Default category */\r\n      this.store.dispatch(new SetCurrentCategory('animal'));\r\n    },1000);\r\n  }\r\n  /** Select template by clicking one of the split windows */\r\n  onSelectTemplate( ev: any ) {\r\n    // {element: 'element4', idx: 3}\r\n    this.store.dispatch(new SetFocusedSplit(ev.idx));\r\n    this.store.dispatch(new SetSplitAction(false));\r\n\r\n    const category = this.split_category_list[ev.idx]\r\n    // console.log( ' Home component -- onSelectTemplate',ev, this.splitService.currentImageIndex[category])\r\n    this.store.dispatch(new SetCurrentCategory(category));\r\n    // this.store.dispatch(new SetSplitCategory({idx: ev.idx, category:category}));\r\n    // Trigger displaying thumbnail image\r\n    this.store.dispatch(new SetImageUrls([]));\r\n    //\r\n    const idx = this.category_list.findIndex(val => val === category);\r\n    this.selectedSeries = {\r\n      seriesId: idx,\r\n      url: '',\r\n      blob: '',\r\n      category: category\r\n    }\r\n    localStorage.setItem('selectedSeriesId',JSON.stringify({series:this.selectedSeries}));\r\n    // Mark bolder line for the  selected thumbnail item\r\n    const selectedImageIdx = this.splitService.currentImageIndex[category];\r\n    this.selectedImage = {item:{imageId: selectedImageIdx, url:'', blob:'', title:'', category: this.category}}\r\n    this.cdr.detectChanges();\r\n    // Select series and get the image list.\r\n    const seriesId = this.category_list.findIndex( val => val === category);\r\n    /** Select series and update thumbnail item */\r\n    this.store.dispatch(new SetSelectedSeriesById(seriesId));\r\n\r\n  }\r\n  /** Select series item by clicking category list */\r\n  onSelectSeries(ev: SeriesModel) {\r\n    this.store.dispatch(new SetSplitAction(false));\r\n    this.splitService.currentImageIndex[ev.category] = 0;\r\n    // this.splitService.currentImageIndex[this.splitService.selectedElement] = 0;\r\n    // Setting the current selected category\r\n    this.store.dispatch(new SetSplitCategory({idx: this.focusedSplit, category: ev.category}));\r\n    // this.store.dispatch(new SetSplitCategory({idx: 0, category: ev.category}));\r\n    // console.log('data2 onSelectSeries -2', ev.category, this.split_category_list, this.focusedSplit );\r\n    this.store.dispatch(new SetCurrentCategory( ev.category));\r\n    // Select series and get the image list.\r\n    /** Select series and update thumbnail item */\r\n    this.store.dispatch(new SetSelectedSeriesById(ev.seriesId));\r\n    // Focusing the first thumbnail_item\r\n    const image: ImageModel = {\r\n      imageId: 0,\r\n      category: ev.category,\r\n      url: '',\r\n      blob: '',\r\n      title: ''\r\n    }\r\n    this.store.dispatch(new SetSelectedImageById(image));\r\n    // Make signal the first image is loaded,\r\n    // which can be the starting point of processing for the next split window\r\n    this.store.dispatch(new SetIsImageLoaded({idx: this.focusedSplit}));\r\n    // Trigger displaying thumbnail image\r\n    this.store.dispatch(new SetImageUrls([]))\r\n  }\r\n  /** Select thumbnail item by clicking  */\r\n  onSelectItem( ev: any) {\r\n    // console.log('select item',ev);\r\n    this.store.dispatch(new SetSplitAction(false));\r\n    this.store.dispatch(new SetSelectedImageById(ev));\r\n    this.cdr.detectChanges();\r\n    // If splitAction is true, it's time to change split mode so need to stop changing\r\n    // image selection.\r\n    this.splitService.currentImageIndex[ev.category] = ev.imageId;\r\n    // console.log('data1', this.splitService.currentImageIndex)\r\n  }\r\n  /** Select split mode by clicking grid menu in the toolbar */\r\n  onSelectMode( ev: any) {\r\n    // console.log(' splitMode', ev);\r\n    /**\r\n     *  Selecting splitMode trigger display-grid.component. --> display-grid-template.component -->\r\n     *  grid-template.directive --> grid-template.component --> carousel-main.component\r\n     */\r\n    this.splitMode = ev.mode;\r\n    // If splitAction is true, it's time to change split mode so need to stop changing\r\n    // image selection.\r\n    this.store.dispatch(new SetSplitAction(true));\r\n    this.splitService.selectedElement = ev;\r\n  }\r\n  /** Display thumbnail item, whenever event triggering */\r\n  thumbnailWorkerProcess() {\r\n    // this.getImageUrls$.pipe(\r\n    this.currentCategory$.pipe().subscribe(val => {\r\n      this.category = val;\r\n      //console.log('-- cat5-4', val)\r\n    });\r\n    /**\r\n     * Whenever imageUrl is updated from carousel-main.component, thumbnail list is updated.\r\n     * */\r\n    this.getImageUrls$.pipe(\r\n      takeUntil(this.unsubscribe$),\r\n    ).subscribe(() => {\r\n      this.currentImages = [];\r\n      this.currentImages = this.imageService.cachedThumbnailImages.map(val => val.image)\r\n        .filter(val =>  {\r\n          return val.category === this.category\r\n        })\r\n        .map( (v: any) => {\r\n          return {item: v}\r\n        });\r\n        this.cdr.detectChanges();\r\n    });\r\n  }\r\n  /** Display series image upon receiving series images that are updated by the webworker process */\r\n  seriesWorkerProcess() {\r\n    this.seriesUrls$.pipe(\r\n      skip(1),\r\n      takeUntil(this.unsubscribe$),\r\n      tap((url) => {\r\n        this.currentSeries = {series:[]} ;\r\n        // this.cacheSeriesService.cachedSeries.map( v => this.currentSeries.seriesList.push(v));\r\n        this.currentSeries.series = [...this.cacheSeriesService.cachedSeries]\r\n        // this.cdr.detectChanges();\r\n        // console.log(' this.currentSeries', this.currentSeries)\r\n      })\r\n    ).subscribe()\r\n\r\n    /**\r\n     *\r\n     * */\r\n    if( typeof Worker !== 'undefined') {\r\n      this.seriesWorkerSubProcess();\r\n    }\r\n  }\r\n  /**\r\n   * Use webworker to not wait until series images are loaded\r\n   * */\r\n  private seriesWorkerSubProcess() {\r\n    /** Start series web worker with the initial values */\r\n    this.seriesItemService.getSeriesObject()\r\n      .subscribe((val: any[]) => {\r\n        const input$ = of(val);\r\n\r\n        if (!this.seriesWorker) {\r\n          this.seriesWorker = new Worker(new URL('../../../assets/workers/series.worker', import.meta.url), {type: 'module'})\r\n        }\r\n        // @ts-ignore\r\n        fromWorker<{}, {}>(          () => this.seriesWorker, input$)\r\n          .subscribe((data: any) => {\r\n            /** read blob data */\r\n            const series: any = this.imageService.readFile(data.blob)\r\n            series.subscribe((obj: any) => {\r\n              // console.log('--- series list - webWorkerProcess - data', data.seriesId);\r\n              data.blob = obj;\r\n              this.cacheSeriesService.checkAndCacheSeries(data);\r\n              this.store.dispatch(new SetIsSeriesLoaded(true));\r\n              this.store.dispatch(new SetSeriesUrls([data.url]))\r\n            })\r\n          }, (error: any) => console.error(error))\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.unsubscribe.next({});\r\n    this.unsubscribe.complete();\r\n    localStorage.clear();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cacheSeriesService",
                        "type": "CacheSeriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "imageService",
                        "type": "ImageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "seriesItemService",
                        "type": "SeriesItemService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "splitService",
                        "type": "SplitService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 82,
                "jsdoctags": [
                    {
                        "name": "cacheSeriesService",
                        "type": "CacheSeriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imageService",
                        "type": "ImageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "seriesItemService",
                        "type": "SeriesItemService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "splitService",
                        "type": "SplitService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "SelectThumbnailComponent",
            "id": "component-SelectThumbnailComponent-c9ba29b7237eda6dcb222de21b1092f54d7ddb7d2688c7b02dec29069a2827f1b33e48f920bc84d2f8c23d5942027bf411c5d808f44d6e347d671b70ce4f853e",
            "file": "src/app/components/thumbnail/select-thumbnail/select-thumbnail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "select-thumbnail",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  select-thumbnail works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'select-thumbnail',\n  template: `\n    <p>\n      select-thumbnail works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class SelectThumbnailComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SeriesItemComponent",
            "id": "component-SeriesItemComponent-51ed1f00e50137ab513b70227b53e1ebeb6331ec9239e2c9f4fa19f16b6fc79d19c3bbef34755ba630bd58b72514aa44ab3443bb45a62acd07e1a2211e20587b",
            "file": "src/app/components/series/series-item/series-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "series-item",
            "styleUrls": [],
            "styles": [
                "\n    img {\n      /*width: 145px;*/\n      width: auto;\n      height:100px;\n      object-fit: fill;\n    }\n    .selected_item {\n      width: auto;\n      border: red solid 4px ;\n    }\n  "
            ],
            "template": "<div class=\"mb-1 w-auto\">\n  <div class=\"{{borderColor}}\" (click)=\"selected.emit(_seriesImage)\">\n    <img #img>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "seriesImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_seriesImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SeriesModel",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "borderColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'img'"
                        }
                    ]
                },
                {
                    "name": "selectedSeriesId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SeriesModel | undefined",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component,\n  ElementRef, EventEmitter, Input,\n  OnChanges,\n  OnInit, Output,\n  SimpleChanges, ViewChild\n} from '@angular/core';\nimport {SeriesModel} from \"../../../models/data\";\n\n@Component({\n  selector: 'series-item',\n  template: `\n    <div class=\"mb-1 w-auto\">\n      <div class=\"{{borderColor}}\" (click)=\"selected.emit(_seriesImage)\">\n        <img #img>\n      </div>\n    </div>\n  `,\n  styles: [`\n    img {\n      /*width: 145px;*/\n      width: auto;\n      height:100px;\n      object-fit: fill;\n    }\n    .selected_item {\n      width: auto;\n      border: red solid 4px ;\n    }\n  `],\n   changeDetection: ChangeDetectionStrategy.OnPush}\n)\nexport class SeriesItemComponent implements  AfterViewInit, OnChanges {\n  @ViewChild('img') image?: ElementRef;\n  @Input() set seriesImage (v: any) {\n    // console.log(' series_item seriesImage',v)\n    this._seriesImage = v;\n    if( this.image) {\n      this.image.nativeElement.src = this._seriesImage.blob;\n    }\n    this.cdr.markForCheck();\n  };\n  // @Input() seriesImage: SeriesModel;\n  @Input() set addClass( v: any){\n    this.cdr.markForCheck();\n  }\n  @Output() selected: EventEmitter<any> = new EventEmitter();\n  _seriesImage: SeriesModel;\n  borderColor: any;\n  selectedSeriesId: SeriesModel | undefined;\n  constructor(private cdr: ChangeDetectorRef) { }\n  ngAfterViewInit() {\n    // console.log(' ---- series_item ngAfterViewInit is called', this.selectedSeriesId.category, this._seriesImage.category);\n    this.image.nativeElement.src = this._seriesImage.blob;\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    this.borderColor = 'none_selected_item'\n    this.cdr.detectChanges();\n\n    // @ts-ignore\n    const selectedId = localStorage.getItem('selectedSeriesId')\n    // console.log('selectedId', selectedId, this._seriesImage)\n    this.selectedSeriesId = selectedId && JSON.parse(selectedId).series;\n    // console. log('selectedImageId, ', this.selectedSeriesId.category, this._seriesImage.category)\n    if( changes['addClass'] && changes['addClass'].currentValue) {\n     // console.log('series_Item changes', changes, this.selectedSeriesId.category, this._seriesImage.category)\n      if( this.selectedSeriesId.category === this._seriesImage.category) {\n        this.borderColor = 'selected_item';\n      } else {\n        this.borderColor = 'non_selected_item';\n      }\n      this.cdr.detectChanges();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    img {\n      /*width: 145px;*/\n      width: auto;\n      height:100px;\n      object-fit: fill;\n    }\n    .selected_item {\n      width: auto;\n      border: red solid 4px ;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnChanges"
            ],
            "accessors": {
                "seriesImage": {
                    "name": "seriesImage",
                    "setSignature": {
                        "name": "seriesImage",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "addClass": {
                    "name": "addClass",
                    "setSignature": {
                        "name": "addClass",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 46,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "SeriesListComponent",
            "id": "component-SeriesListComponent-767451966d4e89de507a26a71443b443b364d102fa479e49e164a7a9dd788314f79a57ce62bbc5d3af7d217fdd481ac4a2dbb810071b600ddbe5e135ad3ecec4",
            "file": "src/app/components/series/seires-list/series-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "series-list",
            "styleUrls": [],
            "styles": [
                "\n    .cdk-scroll-source {\n      writing-mode: horizontal-tb;\n      /*writing-mode: vertical-lr;*/\n    }\n\n    .cdk-scroll-source .cdk-scroll-viewport {\n      height: 650px;\n      width: 100%;\n    }\n\n    .cdk-scroll-source .cdk-scroll-viewport .cdk-virtual-scroll-content-wrapper {\n      display: flex;\n      flex-direction: column;\n    }\n  "
            ],
            "template": "<div class=\"h-40\">\n  <div class=\"cdk-scroll-source w-auto\">\n    <cdk-virtual-scroll-viewport itemSize=\"90\"\n                                 class=\"cdk-scroll-viewport\"\n                                 orientation=\"vertical\"\n    >\n      <ng-container *cdkVirtualFor=\"let item of _currentSeries\">\n        <series-item [seriesImage]=\"item\"\n                         [addClass]=\"addClass\"\n                         (selected)=onSelectSeries($event)>\n        </series-item>\n      </ng-container>\n    </cdk-virtual-scroll-viewport>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "selectedSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectSeries",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_currentSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "addClass",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "tmpSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "viewPort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkVirtualScrollViewport | undefined",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CdkVirtualScrollViewport, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addClassFn",
                    "args": [
                        {
                            "name": "ev",
                            "type": "SeriesModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "SeriesModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectSeries",
                    "args": [
                        {
                            "name": "ev",
                            "type": "SeriesModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "SeriesModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, EventEmitter,\n  Input,\n  OnInit, Output,\n  ViewChild\n} from '@angular/core';\nimport {\n  CdkVirtualScrollViewport,\n} from \"@angular/cdk/scrolling\";\n// @ts-ignore\nimport {CacheSeriesService} from \"../../../services/cashe-series.service\";\nimport {SetCategoryList} from \"../../../../state/status/status.actions\";\nimport {Store} from \"@ngxs/store\";\nimport {SeriesModel} from \"../../../models/data\";\n\n@Component({\n  selector: 'series-list',\n  template: `\n    <div class=\"h-40\">\n      <div class=\"cdk-scroll-source w-auto\">\n        <cdk-virtual-scroll-viewport itemSize=\"90\"\n                                     class=\"cdk-scroll-viewport\"\n                                     orientation=\"vertical\"\n        >\n          <ng-container *cdkVirtualFor=\"let item of _currentSeries\">\n            <series-item [seriesImage]=\"item\"\n                             [addClass]=\"addClass\"\n                             (selected)=onSelectSeries($event)>\n            </series-item>\n          </ng-container>\n        </cdk-virtual-scroll-viewport>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .cdk-scroll-source {\n      writing-mode: horizontal-tb;\n      /*writing-mode: vertical-lr;*/\n    }\n\n    .cdk-scroll-source .cdk-scroll-viewport {\n      height: 650px;\n      width: 100%;\n    }\n\n    .cdk-scroll-source .cdk-scroll-viewport .cdk-virtual-scroll-content-wrapper {\n      display: flex;\n      flex-direction: column;\n    }\n  `\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SeriesListComponent implements OnInit {\n  _currentSeries : any[];\n  @Input() set selectedSeries (v: any){\n    // console.log('data2', v);\n    v && this.addClassFn(v);\n  };\n  @Input() set currentSeries (se:  any) {\n    if( se ) {\n      this._currentSeries = se.series;\n    }\n  }\n  @Output() selectSeries = new EventEmitter<any>()\n  @ViewChild(CdkVirtualScrollViewport, {static: true}) viewPort: CdkVirtualScrollViewport | undefined;\n\n  addClass: {} = {};\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private cacheSeriesService: CacheSeriesService,\n    private store: Store\n  ) {}\n  ngOnInit(): void {\n    const initial_value = {\n      series: {\n        seriesId: 0,\n        url: '',\n        blob: '',\n        category: 'animal'\n      }\n    }\n    localStorage.setItem('selectedSeriesId', JSON.stringify(initial_value));\n  }\n  ngAfterViewInit() {\n  }\n\n  tmpSeries: any[];\n  onSelectSeries(ev: SeriesModel) {\n    if( !ev) return;\n    /**\n     * To synchronize with the current selected Series, after when it is activated by clicking Series-list\n     * */\n    this.selectSeries.emit(ev);\n    localStorage.setItem('selectedSeriesId', JSON.stringify({series:ev}));\n    this.addClassFn(ev);\n  }\n\n  private addClassFn(ev: SeriesModel) {\n    setTimeout(() => {\n      this.addClass = {\n        class: 'selected_item',\n        category: ev.category\n      }\n      this.cdr.detectChanges();\n      this.viewPort.scrollToIndex(ev.seriesId, 'smooth')\n    }, 200);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .cdk-scroll-source {\n      writing-mode: horizontal-tb;\n      /*writing-mode: vertical-lr;*/\n    }\n\n    .cdk-scroll-source .cdk-scroll-viewport {\n      height: 650px;\n      width: 100%;\n    }\n\n    .cdk-scroll-source .cdk-scroll-viewport .cdk-virtual-scroll-content-wrapper {\n      display: flex;\n      flex-direction: column;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cacheSeriesService",
                        "type": "CacheSeriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cacheSeriesService",
                        "type": "CacheSeriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "selectedSeries": {
                    "name": "selectedSeries",
                    "setSignature": {
                        "name": "selectedSeries",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 58,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "currentSeries": {
                    "name": "currentSeries",
                    "setSignature": {
                        "name": "currentSeries",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "se",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 62,
                        "jsdoctags": [
                            {
                                "name": "se",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-58e83e364eed652d1ad277d07b39bf052a364be40b96fbf28ccbef5794096400647180308074bae6b18ec6431fde2c3d4b6d0e092c38a1aff752fd43c2d8991c",
            "file": "src/app/utils/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "spinner",
            "styleUrls": [],
            "styles": [
                "\n    .spinner-container {\n      background-color: rgba(0,0,0, 0.1);\n      position: fixed;\n      left: 0;\n      top: 0;\n      height: 100vh;\n      width: 100vw;\n\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      z-index: 10000\n    }\n  "
            ],
            "template": "<div class=\"spinner-container\" *ngIf=\"spinnerActive\">\n  <mat-spinner></mat-spinner>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showSpinner",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "spinnerActive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "spinnerHandler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpinnerHandlerService",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectorRef, Component} from '@angular/core';\nimport {SpinnerHandlerService} from \"./spinner-handler.service\";\n\n\n@Component({\n  selector: 'spinner',\n  template: `\n    <div class=\"spinner-container\" *ngIf=\"spinnerActive\">\n      <mat-spinner></mat-spinner>\n    </div>\n  `,\n  styles: [`\n    .spinner-container {\n      background-color: rgba(0,0,0, 0.1);\n      position: fixed;\n      left: 0;\n      top: 0;\n      height: 100vh;\n      width: 100vw;\n\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      z-index: 10000\n    }\n  `]\n})\nexport class SpinnerComponent {\n\n  spinnerActive: boolean = true;\n\n  constructor(\n    public spinnerHandler: SpinnerHandlerService,\n    private cdr: ChangeDetectorRef\n  ) {\n    this.spinnerHandler.showSpinner.subscribe(this.showSpinner.bind(this));\n  }\n\n  showSpinner = (state: boolean): void => {\n    // console.log('state', state);\n    this.spinnerActive = state;\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .spinner-container {\n      background-color: rgba(0,0,0, 0.1);\n      position: fixed;\n      left: 0;\n      top: 0;\n      height: 100vh;\n      width: 100vw;\n\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      z-index: 10000\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "spinnerHandler",
                        "type": "SpinnerHandlerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "spinnerHandler",
                        "type": "SpinnerHandlerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ThumbnailItemComponent",
            "id": "component-ThumbnailItemComponent-ed1c4cf36e32b8aadba3a96c54977f57f7df0e678cf3084cf871f69f3a8a47d86256f17be74a72abb55077a5f50ecdedefb8d416a079f53741d3652a2690c07d",
            "file": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "thumbnail-item",
            "styleUrls": [],
            "styles": [
                "\n    img {\n      width: 90px;\n      height: 60px;\n      object-fit: fill;\n      background: antiquewhite;\n    }\n    .selected_item {\n      width: auto;\n      height: 68px;\n      border: red solid 4px ;\n    }\n  "
            ],
            "template": "<div class=\"mr-1\">\n  <div class=\"{{borderColor}}\" (click)=\"selected.emit(_originalImage)\">\n    <img  #img >\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "originalImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<ImageModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter<ImageModel>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_originalImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "borderColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'img'"
                        }
                    ]
                },
                {
                    "name": "selectedImageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ImageModel | undefined",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {ImageModel} from \"../../../models/data\";\r\n\r\n@Component({\r\n  selector: 'thumbnail-item',\r\n  template: `\r\n    <div class=\"mr-1\">\r\n      <div class=\"{{borderColor}}\" (click)=\"selected.emit(_originalImage)\">\r\n        <img  #img >\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    img {\r\n      width: 90px;\r\n      height: 60px;\r\n      object-fit: fill;\r\n      background: antiquewhite;\r\n    }\r\n    .selected_item {\r\n      width: auto;\r\n      height: 68px;\r\n      border: red solid 4px ;\r\n    }\r\n  `],\r\n   changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ThumbnailItemComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('img') image?: ElementRef;\r\n  @Input() set addClass( v: any){\r\n    this.cdr.markForCheck();\r\n  }\r\n  @Input() set originalImage (v : any ) {\r\n    this._originalImage = v.item;\r\n    if( this.image && this.image.nativeElement) {\r\n      this.image.nativeElement.src = this._originalImage.blob;\r\n      this.cdr.markForCheck();\r\n    }\r\n  }\r\n  @Output() selected: EventEmitter<ImageModel> = new EventEmitter<ImageModel>();\r\n  borderColor!: string ;\r\n  _originalImage: any;\r\n  selectedImageId: ImageModel | undefined;\r\n  constructor(\r\n    private cdr: ChangeDetectorRef\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n  ngAfterViewInit() {\r\n    // @ts-ignore\r\n    // console.log(' thumbnail-item -- category',this._originalImage.category)\r\n    this.image.nativeElement.src = this._originalImage.blob;\r\n    // this.cdr.markForCheck();\r\n  }\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.borderColor = 'none_selected_item'\r\n    this.cdr.markForCheck();\r\n\r\n    // @ts-ignore\r\n    this.selectedImageId = JSON.parse(localStorage.getItem('selectedImageId')).item;\r\n    // console.log('data2 this.selectedImageId', changes['addClass'].currentValue.imageId, this.selectedImageId.imageId, this._originalImage.imageId)\r\n    if( changes['addClass'] && changes['addClass'].currentValue) {\r\n      // @ts-ignore\r\n      if( this.selectedImageId.imageId === this._originalImage.imageId) {\r\n        this.borderColor = 'selected_item';\r\n      } else {\r\n        this.borderColor = 'non_selected_item';\r\n      }\r\n      this.cdr.markForCheck();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    img {\n      width: 90px;\n      height: 60px;\n      object-fit: fill;\n      background: antiquewhite;\n    }\n    .selected_item {\n      width: auto;\n      height: 68px;\n      border: red solid 4px ;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "addClass": {
                    "name": "addClass",
                    "setSignature": {
                        "name": "addClass",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "originalImage": {
                    "name": "originalImage",
                    "setSignature": {
                        "name": "originalImage",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 45,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ThumbnailListComponent",
            "id": "component-ThumbnailListComponent-0c4141b5b7b90f317f3530bd3c011987d723406bbf15cbef7be205f2e5d83ec875c2562cfd0ce230c790e2ac9cae18df27f62da7ffca238309afc064961d690d",
            "file": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: VIRTUAL_SCROLL_STRATEGY, useClass: CustomVirtualScrollStrategy }"
                }
            ],
            "selector": "thumbnail-list",
            "styleUrls": [],
            "styles": [
                "\n    .cdk-scroll-source {\n      writing-mode: vertical-lr;\n    }\n    .cdk-scroll-source .cdk-scroll-viewport {\n      height: 90px;\n      width: 100%;\n    }\n    .cdk-scroll-source .cdk-scroll-viewport .cdk-virtual-scroll-content-wrapper {\n      display: flex;\n      flex-direction: row;\n    }\n  "
            ],
            "template": "<div class=\"mt-1\">\n  <div class=\"cdk-scroll-source\" style=\"width: 99%\">\n    <cdk-virtual-scroll-viewport\n      class=\"cdk-scroll-viewport\"\n      orientation=\"horizontal\" >\n      <ng-container *cdkVirtualFor=\"let item of _currentImages\">\n        <thumbnail-item [originalImage]=\"item\"\n                        [addClass]=\"addClass\"\n                        (selected) = onSelectItem($event)>\n        </thumbnail-item>\n      </ng-container>\n    </cdk-virtual-scroll-viewport>\n  </div>\n</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentImages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "selectedImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectItem",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_currentImages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "addClass",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "draggedInx",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "getSelectedImageById$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ImageModel>",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "StatusState.getSelectedImageById"
                        }
                    ]
                },
                {
                    "name": "idx",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "viewPort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkVirtualScrollViewport | undefined",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CdkVirtualScrollViewport, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectItem",
                    "args": [
                        {
                            "name": "ev",
                            "type": "ImageModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "ImageModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, EventEmitter,\n  Injectable,\n  Input, OnDestroy,\n  OnInit, Output,\n  ViewChild\n} from '@angular/core';\nimport {\n  CdkVirtualScrollViewport,\n  FixedSizeVirtualScrollStrategy,\n  VIRTUAL_SCROLL_STRATEGY\n} from \"@angular/cdk/scrolling\";\nimport {Select} from \"@ngxs/store\";\nimport {StatusState} from \"../../../../state/status/status.state\";\n\nimport {Observable, Subject} from \"rxjs\";\nimport {ImageModel} from \"../../../models/data\";\nimport {take, takeUntil} from \"rxjs/operators\";\n@Injectable()\nexport class CustomVirtualScrollStrategy extends FixedSizeVirtualScrollStrategy {\n  constructor() {\n    /** Below value is assumed, that could contain at most 100 image pixel data at one time.\n     * If less than this value, the image data tend to be shuffled by sharing memory usage while scrolling  */\n    super(90, 10000, 10000); // (itemSize, minBufferPx, maxBufferPx)\n  }\n}\n\n@Component({\n  selector: 'thumbnail-list',\n  template: `\n    <div class=\"mt-1\">\n      <div class=\"cdk-scroll-source\" style=\"width: 99%\">\n        <cdk-virtual-scroll-viewport\n          class=\"cdk-scroll-viewport\"\n          orientation=\"horizontal\" >\n          <ng-container *cdkVirtualFor=\"let item of _currentImages\">\n            <thumbnail-item [originalImage]=\"item\"\n                            [addClass]=\"addClass\"\n                            (selected) = onSelectItem($event)>\n            </thumbnail-item>\n          </ng-container>\n        </cdk-virtual-scroll-viewport>\n      </div>\n    </div>  `,\n  styles: [`\n    .cdk-scroll-source {\n      writing-mode: vertical-lr;\n    }\n    .cdk-scroll-source .cdk-scroll-viewport {\n      height: 90px;\n      width: 100%;\n    }\n    .cdk-scroll-source .cdk-scroll-viewport .cdk-virtual-scroll-content-wrapper {\n      display: flex;\n      flex-direction: row;\n    }\n  `],\n  providers: [{provide: VIRTUAL_SCROLL_STRATEGY, useClass: CustomVirtualScrollStrategy}],\n  changeDetection: ChangeDetectionStrategy.OnPush\n\n})\nexport class ThumbnailListComponent implements OnInit, AfterViewInit {\n  @Input() set selectedImage (v: any){\n    if( v ) {\n      v && this.onSelectItem(v.item);\n      this.cdr.markForCheck();\n    }\n  };\n  @Input() set currentImages (im:  any) {\n    // console.log(' currentImages', im)\n    this._currentImages = im;\n    this.cdr.markForCheck();\n  }\n  @Output() selectItem = new EventEmitter<any>();\n  @ViewChild(CdkVirtualScrollViewport, { static: true }) viewPort: CdkVirtualScrollViewport | undefined;\n  @Select(StatusState.getSelectedImageById)  getSelectedImageById$: Observable<ImageModel>;\n  _currentImages: any;\n  addClass: {} = {};\n  draggedInx = 0;\n  idx = 0;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n  ) { }\n\n  ngOnInit(): void {\n    const initial_value = {\n      item: {\n        imageId: 1,\n        category: 'animal',\n        url: '',\n        blob: '',\n        title: ''\n      }\n    }\n    localStorage.setItem('selectedImageId', JSON.stringify(initial_value));\n    /**\n     * Triggered from series-list.component ( onSelectSeries),\n     *      carousel.service (getPrevImage, getNextImage)\n     */\n    this.getSelectedImageById$.pipe(\n      // takeUntil(this.unsubscribe$)\n      take(1)\n    ).subscribe( (image: any) => {\n\n      // To synchronize with the current selected item, after when it is activated by clicking item-list\n      localStorage.setItem('selectedImageId', JSON.stringify({item: image}));\n      setTimeout(() => {\n      // console.log(' data1 -', image.imageId)\n        this.viewPort.scrollToIndex(image.imageId, 'smooth')\n        this.addClass = {\n          class:'selected_item',\n          imageId: image.imageId\n        }\n      this.cdr.markForCheck();\n      },200);\n    })\n    ///\n  }\n  ngAfterViewInit() {\n    // Because of not focused with red border even though clicking item just after staring.\n    setTimeout(()=> {\n      this.addClass = {\n        class: 'selected_item',\n        index: 1\n      }\n    })\n  }\n\n  onSelectItem(ev:ImageModel) {\n    // console.log( '--- thumbnail-list id', ev )\n    if( !ev) return;\n\n    localStorage.setItem('selectedImageId', JSON.stringify({item:ev}));\n    this.selectItem.emit(ev); // send to home.component\n    /**\n     * To synchronize with the current selected item, after when it is activated by clicking item-list\n     * */\n    setTimeout(() => {\n      this.viewPort?.scrollToIndex(ev.imageId, 'smooth')\n      this.addClass = {\n        class: 'selected_item',\n        index: ev.imageId\n      }\n      this.cdr.detectChanges();\n    },300);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .cdk-scroll-source {\n      writing-mode: vertical-lr;\n    }\n    .cdk-scroll-source .cdk-scroll-viewport {\n      height: 90px;\n      width: 100%;\n    }\n    .cdk-scroll-source .cdk-scroll-viewport .cdk-virtual-scroll-content-wrapper {\n      display: flex;\n      flex-direction: row;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 83,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "selectedImage": {
                    "name": "selectedImage",
                    "setSignature": {
                        "name": "selectedImage",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 66,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "currentImages": {
                    "name": "currentImages",
                    "setSignature": {
                        "name": "currentImages",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "im",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 72,
                        "jsdoctags": [
                            {
                                "name": "im",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ToolbarComponent",
            "id": "component-ToolbarComponent-0684d8ef1f96c0238a3b77038030fe4e4d47f395136ac96625cb5b9722e50261a2995dec3e250c93495322b849aadfdb5a77596424ca58f77fe983d1524a97dc",
            "file": "src/app/components/grid/toolbar/toolbar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "grid-toolbar",
            "styleUrls": [],
            "styles": [
                "\n    .tool-bar{\n      display: flex;\n      flex-direction: row;\n      flex-wrap: nowrap;\n      justify-content: flex-start;\n      /*align-content: stretch;*/\n      align-items: flex-start;\n      width: 100%;\n    }\n  "
            ],
            "template": "<div class=\"bg-blue-600 flex flex-col justify-center h-16\">\n  <div class=\"flex justify-between\">\n    <div class=\"flex-start mx-3 mt-3 text-white text-lg\">Splitting window for demo. ( by Wonsup Jung )</div>\n    <div class=\"flex-end mx-3 mt-2\">\n      <div class=\"tool-bar\">\n        <ng-container>\n          <grid-menu (selectMode)=\"selectMode.emit($event)\"></grid-menu>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "selectMode",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectMenu",
                    "args": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'grid-toolbar',\n  template: `\n    <div class=\"bg-blue-600 flex flex-col justify-center h-16\">\n      <div class=\"flex justify-between\">\n        <div class=\"flex-start mx-3 mt-3 text-white text-lg\">Splitting window for demo. ( by Wonsup Jung )</div>\n        <div class=\"flex-end mx-3 mt-2\">\n          <div class=\"tool-bar\">\n            <ng-container>\n              <grid-menu (selectMode)=\"selectMode.emit($event)\"></grid-menu>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .tool-bar{\n      display: flex;\n      flex-direction: row;\n      flex-wrap: nowrap;\n      justify-content: flex-start;\n      /*align-content: stretch;*/\n      align-items: flex-start;\n      width: 100%;\n    }\n  `\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ToolbarComponent implements OnInit {\n  @Output() selectMode = new EventEmitter<any>();\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n  onSelectMenu(ev: any) {\n    console.log(' grid menu', ev);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .tool-bar{\n      display: flex;\n      flex-direction: row;\n      flex-wrap: nowrap;\n      justify-content: flex-start;\n      /*align-content: stretch;*/\n      align-items: flex-start;\n      width: 100%;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 34
            },
            "implements": [
                "OnInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "AngularMaterialsModule",
            "id": "module-AngularMaterialsModule-a3284fa832f19176235ed91cb771258d0feca2c800c9bb40cde73e12c73a8335286178883d9f67cabe31edb589f8af5bb90bc93d3bc1935723961cf335afe344",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/shared/angular-materials.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatButtonModule} from \"@angular/material/button\";\r\nimport {MatProgressBarModule} from \"@angular/material/progress-bar\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport {MatGridListModule} from \"@angular/material/grid-list\";\r\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\r\nimport {MatMenuModule} from \"@angular/material/menu\";\r\nimport {ScrollingModule} from \"@angular/cdk/scrolling\";\r\nimport {MatIconModule} from \"@angular/material/icon\";\r\nimport {MatTooltipModule} from \"@angular/material/tooltip\";\r\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\r\nconst materials = [\r\n  MatRadioModule,\r\n  MatButtonModule,\r\n  MatProgressBarModule,\r\n  MatGridListModule,\r\n  MatToolbarModule,\r\n  MatMenuModule,\r\n  ScrollingModule,\r\n  MatIconModule,\r\n  MatTooltipModule,\r\n  MatProgressSpinnerModule\r\n]\r\n\r\n@NgModule({\r\n  declarations:[],\r\n  imports:[\r\n    CommonModule,\r\n    ...materials\r\n  ],\r\n  exports:[\r\n    ...materials,\r\n  ]\r\n})\r\nexport class AngularMaterialsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-e82d17f4e967b7be860bcda258a3a7ee22c02eaa4ac5836833fddd761fe0ee9b45bd427ad540e2f269854000d5dd962feea213932845397474b38a42f83f8fbb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {NgxsModule, Store} from \"@ngxs/store\";\nimport {NgxsSelectSnapshotModule} from \"@ngxs-labs/select-snapshot\";\nimport {HomeModule} from \"./components/home/home.module\";\nimport {CarouselModule} from \"./components/carousel/carousel.module\";\nimport { SpinnerComponent } from './utils/spinner/spinner.component';\nimport {AngularMaterialsModule} from \"../shared/angular-materials.module\";\nimport {SpinnerInterceptorService} from \"./utils/spinner/spinner-interceptor.service\";\n\n@NgModule({\n  declarations: [AppComponent, SpinnerComponent],\n  imports: [BrowserModule,\n    HttpClientModule,\n    CarouselModule,\n    BrowserAnimationsModule,\n    AngularMaterialsModule,\n    HomeModule,\n    NgxsModule.forRoot([]),\n    NgxsSelectSnapshotModule.forRoot()\n  ],\n  providers: [\n    {provide: HTTP_INTERCEPTORS, useClass: SpinnerInterceptorService, multi: true}\n  ],\n  bootstrap: [AppComponent],\n  exports: [\n    SpinnerComponent\n  ]\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "SpinnerInterceptorService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "SpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AngularMaterialsModule"
                        },
                        {
                            "name": "CarouselModule"
                        },
                        {
                            "name": "HomeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CarouselModule",
            "id": "module-CarouselModule-22fa6c4d4c02246570fbc3db1293a8d3bf2182e6c13c97248c07d3000c77330604b8b5ab201946cdd71a7e26c223bf118473db55a7927b76c2afffb63eecdbb5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/carousel/carousel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {CarouselService} from \"../../services/carousel.service\";\r\nimport {HttpClient, HttpClientModule} from \"@angular/common/http\";\r\nimport {CarouselMainComponent} from \"./carousel-main/carousel-main.component\";\r\nimport {AngularMaterialsModule} from \"../../../shared/angular-materials.module\";\r\nimport {NgxsModule} from \"@ngxs/store\";\r\nimport {NgxsSelectSnapshotModule} from \"@ngxs-labs/select-snapshot\";\r\nimport {StatusState} from \"../../../state/status/status.state\";\r\nimport { CarouselMainDisplayComponent } from './carousel-main/carousel-main-display/carousel-main-display.component';\r\n\r\n@NgModule({\r\n  declarations: [CarouselMainComponent, CarouselMainDisplayComponent],\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    AngularMaterialsModule,\r\n    NgxsModule.forRoot([]),\r\n    NgxsModule.forFeature([StatusState]),\r\n    NgxsSelectSnapshotModule.forRoot(),\r\n  ],\r\n  exports: [\r\n    CarouselMainComponent,\r\n    CarouselMainDisplayComponent\r\n  ],\r\n  providers: [CarouselService, HttpClient]\r\n})\r\nexport class CarouselModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CarouselService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CarouselMainComponent"
                        },
                        {
                            "name": "CarouselMainDisplayComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AngularMaterialsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CarouselMainComponent"
                        },
                        {
                            "name": "CarouselMainDisplayComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GridModule",
            "id": "module-GridModule-cace04369c0a8a9320ff1e3e6fdf13b75c043b3e610462430ee96557a3e68a74b73d3898e04d032a4338a0e9a7469fdbfbd29f0517f83175425c75c64d99e60e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/grid/grid.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {DisplayGridComponent} from \"./display-grid/display-grid.component\";\nimport {AngularMaterialsModule} from \"../../../shared/angular-materials.module\";\nimport {DisplayGridTemplateComponent} from \"./display-grid/display-grid-template.component\";\nimport {GridTemplateComponent} from \"./grid-template/grid-template.component\";\nimport {GridTemplateDirective} from \"./grid-directives/grid-template.directive\";\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {BrowserModule} from \"@angular/platform-browser\";\nimport {SelectColorDirective} from \"./grid-directives/select-color.directive\";\nimport { GridMenuComponent } from './grid-menu/grid-menu.component';\nimport { ToolbarComponent } from './toolbar/toolbar.component';\nimport {NgxsModule, StateStream, Store} from \"@ngxs/store\";\nimport {StatusState} from \"../../../state/status/status.state\";\nimport {NgxsSelectSnapshotModule} from \"@ngxs-labs/select-snapshot\";\nimport {CarouselModule} from \"../carousel/carousel.module\";\n\n@NgModule({\n  declarations: [\n    GridTemplateDirective,\n    GridTemplateComponent,\n    SelectColorDirective,\n    DisplayGridComponent,\n    DisplayGridTemplateComponent,\n    GridMenuComponent,\n    ToolbarComponent\n  ],\n    imports: [\n        CommonModule,\n        BrowserAnimationsModule,\n        BrowserModule,\n        AngularMaterialsModule,\n        NgxsModule.forRoot(),\n        NgxsModule.forFeature([StatusState]),\n        CarouselModule,\n    ],\n  exports: [\n    GridTemplateDirective,\n    GridTemplateComponent,\n    SelectColorDirective,\n    DisplayGridComponent,\n    DisplayGridTemplateComponent,\n    GridMenuComponent,\n    ToolbarComponent\n  ],\n})\nexport class GridModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DisplayGridComponent"
                        },
                        {
                            "name": "DisplayGridTemplateComponent"
                        },
                        {
                            "name": "GridMenuComponent"
                        },
                        {
                            "name": "GridTemplateComponent"
                        },
                        {
                            "name": "GridTemplateDirective"
                        },
                        {
                            "name": "SelectColorDirective"
                        },
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AngularMaterialsModule"
                        },
                        {
                            "name": "CarouselModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DisplayGridComponent"
                        },
                        {
                            "name": "DisplayGridTemplateComponent"
                        },
                        {
                            "name": "GridMenuComponent"
                        },
                        {
                            "name": "GridTemplateComponent"
                        },
                        {
                            "name": "GridTemplateDirective"
                        },
                        {
                            "name": "SelectColorDirective"
                        },
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "id": "module-HomeModule-6fc869883c1de6ca506479e55cf6ffce5c9c5a5917aecb714cdec31e354d95b0267b5dd8219bad883da448e09520f5211da2ae44f3d3fc0705d9e5761a7eacb3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/home/home.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HomeComponent } from './home.component';\nimport {GridModule} from \"../grid/grid.module\";\nimport {ThumbnailModule} from \"../thumbnail/thumbnail.module\";\nimport {SeriesModule} from \"../series/series.module\";\nimport {AppModule} from \"../../app.module\";\n\n@NgModule({\n  declarations: [\n    HomeComponent\n  ],\n  imports: [\n    CommonModule,\n    GridModule,\n    ThumbnailModule,\n    SeriesModule,\n  ],\n  exports: [\n    HomeComponent,\n    GridModule\n  ]\n})\nexport class HomeModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "GridModule"
                        },
                        {
                            "name": "SeriesModule"
                        },
                        {
                            "name": "ThumbnailModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GridModule"
                        },
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SeriesModule",
            "id": "module-SeriesModule-d5afe0a54ba15f7760bae8b8bfdfa250a7e23a9f67e65dd840c94487925f71b5a95fba981b4bfd04e8381323865585f6da2b024da75ef6027a34f171b85cd4fb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/series/series.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SeriesListComponent } from './seires-list/series-list.component';\nimport { SeriesItemComponent } from './series-item/series-item.component';\nimport {AngularMaterialsModule} from \"../../../shared/angular-materials.module\";\n@NgModule({\n  declarations: [\n    SeriesListComponent,\n    SeriesItemComponent\n  ],\n  imports: [\n    CommonModule,\n    AngularMaterialsModule,\n  ],\n  exports: [\n    SeriesListComponent,\n    SeriesItemComponent\n  ]\n})\nexport class SeriesModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SeriesItemComponent"
                        },
                        {
                            "name": "SeriesListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AngularMaterialsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SeriesItemComponent"
                        },
                        {
                            "name": "SeriesListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ThumbnailModule",
            "id": "module-ThumbnailModule-a58da856e3c51787cc81ad1e131a44bf5a5b050792cfcfc8bfc6c032cab21db0231f74eb5276d81b21da4941724813d4f4d40217c6c460360d991d5693aa7ef7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/thumbnail/thumbnail.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThumbnailItemComponent } from './thumbnail-item/thumbnail-item.component';\nimport { ThumbnailListComponent } from './thumbnail-list/thumbnail-list.component';\nimport {AngularMaterialsModule} from \"../../../shared/angular-materials.module\";\nimport {NgxsModule} from \"@ngxs/store\";\nimport {StatusState} from \"../../../state/status/status.state\";\nimport { SelectThumbnailComponent } from './select-thumbnail/select-thumbnail.component';\n\n@NgModule({\n  declarations: [\n    ThumbnailItemComponent,\n    ThumbnailListComponent,\n    SelectThumbnailComponent\n  ],\n  imports: [\n    CommonModule,\n    AngularMaterialsModule,\n    NgxsModule.forRoot(),\n    NgxsModule.forFeature([StatusState]),\n  ],\n  exports: [\n    ThumbnailItemComponent,\n    ThumbnailListComponent,\n    SelectThumbnailComponent\n  ],\n})\nexport class ThumbnailModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectThumbnailComponent"
                        },
                        {
                            "name": "ThumbnailItemComponent"
                        },
                        {
                            "name": "ThumbnailListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AngularMaterialsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SelectThumbnailComponent"
                        },
                        {
                            "name": "ThumbnailItemComponent"
                        },
                        {
                            "name": "ThumbnailListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "_stop",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/assets/workers/carousel.worker.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean"
            },
            {
                "name": "_stop",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "storybook-static/assets/workers/carousel.worker.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean"
            },
            {
                "name": "_stop",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "dist/split-window220225/assets/workers/carousel.worker.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean"
            },
            {
                "name": "axiosCommData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/axiosComm.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "async (url: string) => {\r\n\r\n  return await axios.get(url, {responseType: 'blob'} );\r\n}"
            },
            {
                "name": "cachedInstance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/assets/workers/carousel.worker.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "cachedInstance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "storybook-static/assets/workers/carousel.worker.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "cachedInstance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "dist/split-window220225/assets/workers/carousel.worker.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/home/home.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/series/seires-list/series-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/series/series-item/series-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/carousel/carousel-main/carousel-main-display/carousel-main-display.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultMode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/grid/grid-menu/grid-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultMode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DisplayGridTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/grid/display-grid/display-grid-template.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n}"
            },
            {
                "name": "images",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    { item: {\r\n      imageId: 1,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/100.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 2,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/101.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 3,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/102.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 4,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/103.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 5,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/104.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 6,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/105.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 7,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/106.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 8,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/107.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 9,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/108.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 10,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/109.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 11,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/110.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 12,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/111.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 13,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/112.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 14,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/113.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 15,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/114.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 16,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/115.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 17,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/116.png',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 18,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/117.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 19,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/118.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 20,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/119.jpeg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 21,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/120.jpeg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 22,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/121.jpeg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 23,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/122.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 24,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/123.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 25,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/124.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 26,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/125.png',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 27,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/126.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 28,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/127.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 29,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/128.png',\r\n      title: ''\r\n    }},\r\n  ]"
            },
            {
                "name": "initial_value",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/series/series-item/series-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  series: {\r\n    seriesId: 0,\r\n    url: '',\r\n    blob: 'assets/sample_images/128.png',\r\n    category: 'animal'\r\n  }\r\n}"
            },
            {
                "name": "initial_value",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  item: {\r\n    imageId: 1,\r\n    category: 'animal',\r\n    url: '',\r\n    blob: 'assets/sample_images/128.png',\r\n    title: ''\r\n  }\r\n}"
            },
            {
                "name": "initial_value",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  item: {\r\n    imageId: 3,\r\n    category: 'animal',\r\n    url: '',\r\n    blob: 'assets/sample_images/128.png',\r\n    title: ''\r\n  }\r\n}"
            },
            {
                "name": "materials",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/angular-materials.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  MatRadioModule,\r\n  MatButtonModule,\r\n  MatProgressBarModule,\r\n  MatGridListModule,\r\n  MatToolbarModule,\r\n  MatMenuModule,\r\n  ScrollingModule,\r\n  MatIconModule,\r\n  MatTooltipModule,\r\n  MatProgressSpinnerModule\r\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/carousel/carousel-main/carousel-main.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "SelectedItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SelectedSeries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/series/series-item/series-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SeriesList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/series/seires-list/series-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SplitMode_2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SplitMode_3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SplitMode_4",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/home/home.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HomeComponent>",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelectMode: action('selectMode'),\r\n    onSelectSeries: action('selectSeries')\r\n  },\r\n  template: `\r\n  <home></home>\r\n        `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/grid/grid-menu/grid-menu.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<GridMenuComponent>",
                "defaultValue": "(args: GridMenuComponent) => ({\r\n  props: {\r\n    ...args,\r\n    onSelectMode: action('selectMode')\r\n  },\r\n  template: `\r\n    <grid-menu (selectMode)=\"onSelectMode($event)\"></grid-menu>\r\n    `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/grid/display-grid/display-grid-template.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DisplayGridTemplateComponent>",
                "defaultValue": "(args: DisplayGridTemplateComponent) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template:`\r\n    <display-grid-template [templateName]=\"templateName\" [templateHeight]=\"templateHeight\" >\r\n    </display-grid-template>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DisplayGridComponent>",
                "defaultValue": "(args: DisplayGridComponent) => ({\r\n  props: {\r\n    ...args,\r\n    onSelectedTemplate: action('selectTpl')\r\n  },\r\n  template: `\r\n    <div class=\"text-red-600\">Display Grid</div>\r\n    <display-grid [splitMode]=\"splitMode\"\r\n        (selectTpl)=\"onSelectedTemplate($event)\">\r\n    </display-grid>\r\n    `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/grid/toolbar/toolbar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ToolbarComponent>",
                "defaultValue": "(args: ToolbarComponent) => ({\r\n  props: {\r\n    ...args,\r\n  },\r\n  template: `\r\n    <grid-toolbar>\r\n    </grid-toolbar>\r\n    `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/carousel/carousel-main/carousel-main.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CarouselMainComponent>",
                "defaultValue": "(args: CarouselMainComponent) => ({\n  props: args,\n  template: `\n    <app-carousel-main [queryElement]=\"queryElement\"></app-carousel-main>\n  `,\n\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/series/seires-list/series-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SeriesListComponent>",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelected: action('selectSeries')\r\n  },\r\n  template: `\r\n    <div class=\"w-36\">\r\n      <series-list [selectedSeries]=\"selectedSeries\"\r\n                  [currentSeries]=\"currentSeries\"\r\n                  (selectSeries)=\"onSelected($event)\">\r\n      </series-list>\r\n    </div>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/series/series-item/series-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SeriesItemComponent>",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelected: action('selected')\r\n  },\r\n  template: `\r\n    <div class=\"w-36\">\r\n      <series-item [addClass]=\"addClass\"\r\n                      [seriesImage]=\"seriesImage\"\r\n                      (selected)=\"onSelected($event)\">\r\n      </series-item>\r\n    </div>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ThumbnailItemComponent>",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelected: action('selected')\r\n  },\r\n  template: `\r\n    <div class=\"w-24\">\r\n      <thumbnail-item [addClass]=\"addClass\"\r\n                      [originalImage]=\"originalImage\"\r\n                      (selected)=\"onSelected($event)\">\r\n      </thumbnail-item>\r\n    </div>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ThumbnailListComponent>",
                "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelected: action('selected')\r\n  },\r\n  template: `\r\n    <thumbnail-list [selectedImage]=\"selectedImage\"\r\n        [currentImages]=\"currentImages\"\r\n        (selected)=\"onSelected($event)\">\r\n    </thumbnail-list>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/carousel/carousel-main/carousel-main-display/carousel-main-display.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CarouselMainDisplayComponent>",
                "defaultValue": "(agrs:CarouselMainDisplayComponent) => ({\r\n  props: {\r\n    ...agrs\r\n  },\r\n  template: `\r\n      <div class=\"w-auto h-auto\">\r\n        <carousel-main-display\r\n          [progress]=\"progress\"\r\n          [splitIdx]=\"splitIdx\"\r\n          [img]=\"image\"  >\r\n        </carousel-main-display>\r\n      </div>\r\n  `\r\n})"
            },
            {
                "name": "ThumbnailList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ToolbarMode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/grid/toolbar/toolbar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithThumbnailList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/home/home.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "XMLHttpComm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/XMLHttpComm.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "async (url: string) => {\r\n  return await axios.get(url, {responseType: 'blob'} ).then(val => val.data)\r\n    .catch(err => console.log('axios error',err));\r\n}"
            }
        ],
        "functions": [
            {
                "name": "checkIfImageCached",
                "file": "src/assets/workers/carousel.worker.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "instances",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "i",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "instances",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "i",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "checkIfImageCached",
                "file": "storybook-static/assets/workers/carousel.worker.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "instances",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "i",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "instances",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "i",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "checkIfImageCached",
                "file": "dist/split-window220225/assets/workers/carousel.worker.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "instances",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "i",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "instances",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "i",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "data",
                "file": "src/app/models/data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "string"
            },
            {
                "name": "downscaleImage",
                "file": "src/app/utils/down-scale-image.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dataUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "imageType",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "resolution",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "quality",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Promise<string>",
                "jsdoctags": [
                    {
                        "name": "dataUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imageType",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolution",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "quality",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCarouselImage",
                "file": "src/assets/workers/carousel.worker.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "46a702ab-0ef0-4ed5-9c71-f26d4c8b506b",
                        "destructuredParameter": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "46a702ab-0ef0-4ed5-9c71-f26d4c8b506b",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCarouselImage",
                "file": "storybook-static/assets/workers/carousel.worker.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "949c1383-0f8d-459f-8940-928eb507bd57",
                        "destructuredParameter": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "949c1383-0f8d-459f-8940-928eb507bd57",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCarouselImage",
                "file": "dist/split-window220225/assets/workers/carousel.worker.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "12799533-4565-4555-b01e-b31e1c4dd27e",
                        "destructuredParameter": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "12799533-4565-4555-b01e-b31e1c4dd27e",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getImage",
                "file": "src/app/utils/down-scale-image.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dataUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Promise<HTMLImageElement>",
                "jsdoctags": [
                    {
                        "name": "dataUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initialize",
                "file": "src/app/components/series/series-item/series-item.component.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "initialize",
                "file": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "initialize",
                "file": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "sleep",
                "file": "src/assets/workers/carousel.worker.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "ms",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "ms",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sleep",
                "file": "storybook-static/assets/workers/carousel.worker.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "ms",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "ms",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sleep",
                "file": "dist/split-window220225/assets/workers/carousel.worker.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "ms",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "ms",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/assets/workers/carousel.worker.ts": [
                {
                    "name": "_stop",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/assets/workers/carousel.worker.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean"
                },
                {
                    "name": "cachedInstance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/assets/workers/carousel.worker.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "storybook-static/assets/workers/carousel.worker.ts": [
                {
                    "name": "_stop",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "storybook-static/assets/workers/carousel.worker.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean"
                },
                {
                    "name": "cachedInstance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "storybook-static/assets/workers/carousel.worker.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "dist/split-window220225/assets/workers/carousel.worker.ts": [
                {
                    "name": "_stop",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "dist/split-window220225/assets/workers/carousel.worker.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean"
                },
                {
                    "name": "cachedInstance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "dist/split-window220225/assets/workers/carousel.worker.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "src/app/utils/axiosComm.ts": [
                {
                    "name": "axiosCommData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/axiosComm.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "async (url: string) => {\r\n\r\n  return await axios.get(url, {responseType: 'blob'} );\r\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/components/home/home.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/home/home.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/home/home.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HomeComponent>",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelectMode: action('selectMode'),\r\n    onSelectSeries: action('selectSeries')\r\n  },\r\n  template: `\r\n  <home></home>\r\n        `\r\n})"
                },
                {
                    "name": "WithThumbnailList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/home/home.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/components/series/seires-list/series-list.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/series/seires-list/series-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SeriesList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/series/seires-list/series-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/series/seires-list/series-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SeriesListComponent>",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelected: action('selectSeries')\r\n  },\r\n  template: `\r\n    <div class=\"w-36\">\r\n      <series-list [selectedSeries]=\"selectedSeries\"\r\n                  [currentSeries]=\"currentSeries\"\r\n                  (selectSeries)=\"onSelected($event)\">\r\n      </series-list>\r\n    </div>\r\n  `\r\n})"
                }
            ],
            "src/app/components/series/series-item/series-item.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/series/series-item/series-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "initial_value",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/series/series-item/series-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  series: {\r\n    seriesId: 0,\r\n    url: '',\r\n    blob: 'assets/sample_images/128.png',\r\n    category: 'animal'\r\n  }\r\n}"
                },
                {
                    "name": "SelectedSeries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/series/series-item/series-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/series/series-item/series-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SeriesItemComponent>",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelected: action('selected')\r\n  },\r\n  template: `\r\n    <div class=\"w-36\">\r\n      <series-item [addClass]=\"addClass\"\r\n                      [seriesImage]=\"seriesImage\"\r\n                      (selected)=\"onSelected($event)\">\r\n      </series-item>\r\n    </div>\r\n  `\r\n})"
                }
            ],
            "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "initial_value",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  item: {\r\n    imageId: 1,\r\n    category: 'animal',\r\n    url: '',\r\n    blob: 'assets/sample_images/128.png',\r\n    title: ''\r\n  }\r\n}"
                },
                {
                    "name": "SelectedItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ThumbnailItemComponent>",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelected: action('selected')\r\n  },\r\n  template: `\r\n    <div class=\"w-24\">\r\n      <thumbnail-item [addClass]=\"addClass\"\r\n                      [originalImage]=\"originalImage\"\r\n                      (selected)=\"onSelected($event)\">\r\n      </thumbnail-item>\r\n    </div>\r\n  `\r\n})"
                }
            ],
            "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "images",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    { item: {\r\n      imageId: 1,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/100.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 2,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/101.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 3,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/102.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 4,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/103.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 5,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/104.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 6,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/105.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 7,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/106.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 8,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/107.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 9,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/108.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 10,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/109.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 11,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/110.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 12,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/111.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 13,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/112.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 14,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/113.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 15,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/114.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 16,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/115.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 17,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/116.png',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 18,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/117.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 19,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/118.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 20,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/119.jpeg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 21,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/120.jpeg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 22,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/121.jpeg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 23,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/122.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 24,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/123.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 25,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/124.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 26,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/125.png',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 27,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/126.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 28,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/127.jpg',\r\n      title: ''\r\n    }},\r\n    { item: {\r\n      imageId: 29,\r\n      category: 'animal',\r\n      url: '',\r\n      blob: 'assets/sample_images/128.png',\r\n      title: ''\r\n    }},\r\n  ]"
                },
                {
                    "name": "initial_value",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  item: {\r\n    imageId: 3,\r\n    category: 'animal',\r\n    url: '',\r\n    blob: 'assets/sample_images/128.png',\r\n    title: ''\r\n  }\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ThumbnailListComponent>",
                    "defaultValue": "(args) => ({\r\n  props: {\r\n    ...args,\r\n    onSelected: action('selected')\r\n  },\r\n  template: `\r\n    <thumbnail-list [selectedImage]=\"selectedImage\"\r\n        [currentImages]=\"currentImages\"\r\n        (selected)=\"onSelected($event)\">\r\n    </thumbnail-list>\r\n  `\r\n})"
                },
                {
                    "name": "ThumbnailList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/components/carousel/carousel-main/carousel-main-display/carousel-main-display.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/carousel/carousel-main/carousel-main-display/carousel-main-display.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/carousel/carousel-main/carousel-main-display/carousel-main-display.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CarouselMainDisplayComponent>",
                    "defaultValue": "(agrs:CarouselMainDisplayComponent) => ({\r\n  props: {\r\n    ...agrs\r\n  },\r\n  template: `\r\n      <div class=\"w-auto h-auto\">\r\n        <carousel-main-display\r\n          [progress]=\"progress\"\r\n          [splitIdx]=\"splitIdx\"\r\n          [img]=\"image\"  >\r\n        </carousel-main-display>\r\n      </div>\r\n  `\r\n})"
                }
            ],
            "src/app/components/grid/grid-menu/grid-menu.component.stories.ts": [
                {
                    "name": "DefaultMode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/grid/grid-menu/grid-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/grid/grid-menu/grid-menu.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<GridMenuComponent>",
                    "defaultValue": "(args: GridMenuComponent) => ({\r\n  props: {\r\n    ...args,\r\n    onSelectMode: action('selectMode')\r\n  },\r\n  template: `\r\n    <grid-menu (selectMode)=\"onSelectMode($event)\"></grid-menu>\r\n    `\r\n})"
                }
            ],
            "src/app/components/grid/display-grid/display-grid.component.stories.ts": [
                {
                    "name": "DefaultMode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SplitMode_2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SplitMode_3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SplitMode_4",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DisplayGridComponent>",
                    "defaultValue": "(args: DisplayGridComponent) => ({\r\n  props: {\r\n    ...args,\r\n    onSelectedTemplate: action('selectTpl')\r\n  },\r\n  template: `\r\n    <div class=\"text-red-600\">Display Grid</div>\r\n    <display-grid [splitMode]=\"splitMode\"\r\n        (selectTpl)=\"onSelectedTemplate($event)\">\r\n    </display-grid>\r\n    `\r\n})"
                }
            ],
            "src/app/components/grid/display-grid/display-grid-template.component.stories.ts": [
                {
                    "name": "DisplayGridTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/grid/display-grid/display-grid-template.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/grid/display-grid/display-grid-template.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DisplayGridTemplateComponent>",
                    "defaultValue": "(args: DisplayGridTemplateComponent) => ({\r\n  props: {\r\n    ...args\r\n  },\r\n  template:`\r\n    <display-grid-template [templateName]=\"templateName\" [templateHeight]=\"templateHeight\" >\r\n    </display-grid-template>\r\n  `\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n}"
                }
            ],
            "src/shared/angular-materials.module.ts": [
                {
                    "name": "materials",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/angular-materials.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  MatRadioModule,\r\n  MatButtonModule,\r\n  MatProgressBarModule,\r\n  MatGridListModule,\r\n  MatToolbarModule,\r\n  MatMenuModule,\r\n  ScrollingModule,\r\n  MatIconModule,\r\n  MatTooltipModule,\r\n  MatProgressSpinnerModule\r\n]"
                }
            ],
            "src/app/components/carousel/carousel-main/carousel-main.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/carousel/carousel-main/carousel-main.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/carousel/carousel-main/carousel-main.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CarouselMainComponent>",
                    "defaultValue": "(args: CarouselMainComponent) => ({\n  props: args,\n  template: `\n    <app-carousel-main [queryElement]=\"queryElement\"></app-carousel-main>\n  `,\n\n})"
                }
            ],
            "src/app/components/grid/toolbar/toolbar.component.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/grid/toolbar/toolbar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ToolbarComponent>",
                    "defaultValue": "(args: ToolbarComponent) => ({\r\n  props: {\r\n    ...args,\r\n  },\r\n  template: `\r\n    <grid-toolbar>\r\n    </grid-toolbar>\r\n    `\r\n})"
                },
                {
                    "name": "ToolbarMode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/grid/toolbar/toolbar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/utils/XMLHttpComm.ts": [
                {
                    "name": "XMLHttpComm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/XMLHttpComm.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "async (url: string) => {\r\n  return await axios.get(url, {responseType: 'blob'} ).then(val => val.data)\r\n    .catch(err => console.log('axios error',err));\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/assets/workers/carousel.worker.ts": [
                {
                    "name": "checkIfImageCached",
                    "file": "src/assets/workers/carousel.worker.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "instances",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "instances",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCarouselImage",
                    "file": "src/assets/workers/carousel.worker.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "46a702ab-0ef0-4ed5-9c71-f26d4c8b506b",
                            "destructuredParameter": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "46a702ab-0ef0-4ed5-9c71-f26d4c8b506b",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sleep",
                    "file": "src/assets/workers/carousel.worker.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "storybook-static/assets/workers/carousel.worker.ts": [
                {
                    "name": "checkIfImageCached",
                    "file": "storybook-static/assets/workers/carousel.worker.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "instances",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "instances",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCarouselImage",
                    "file": "storybook-static/assets/workers/carousel.worker.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "949c1383-0f8d-459f-8940-928eb507bd57",
                            "destructuredParameter": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "949c1383-0f8d-459f-8940-928eb507bd57",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sleep",
                    "file": "storybook-static/assets/workers/carousel.worker.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "dist/split-window220225/assets/workers/carousel.worker.ts": [
                {
                    "name": "checkIfImageCached",
                    "file": "dist/split-window220225/assets/workers/carousel.worker.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "instances",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "instances",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCarouselImage",
                    "file": "dist/split-window220225/assets/workers/carousel.worker.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "12799533-4565-4555-b01e-b31e1c4dd27e",
                            "destructuredParameter": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "12799533-4565-4555-b01e-b31e1c4dd27e",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sleep",
                    "file": "dist/split-window220225/assets/workers/carousel.worker.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/models/data.ts": [
                {
                    "name": "data",
                    "file": "src/app/models/data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "string"
                }
            ],
            "src/app/utils/down-scale-image.ts": [
                {
                    "name": "downscaleImage",
                    "file": "src/app/utils/down-scale-image.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dataUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "imageType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "resolution",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "quality",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Promise<string>",
                    "jsdoctags": [
                        {
                            "name": "dataUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "resolution",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quality",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getImage",
                    "file": "src/app/utils/down-scale-image.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dataUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Promise<HTMLImageElement>",
                    "jsdoctags": [
                        {
                            "name": "dataUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/components/series/series-item/series-item.component.stories.ts": [
                {
                    "name": "initialize",
                    "file": "src/app/components/series/series-item/series-item.component.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts": [
                {
                    "name": "initialize",
                    "file": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts": [
                {
                    "name": "initialize",
                    "file": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "dist/split-window220225/assets/workers/additional-loading.worker.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadingWorker",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "dist/split-window220225/assets/workers/carousel.worker.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "checkIfImageCached",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "dist/split-window220225/assets/workers/carousel.worker.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCarouselImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "dist/split-window220225/assets/workers/carousel.worker.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sleep",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "dist/split-window220225/assets/workers/carousel.worker.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_stop",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "dist/split-window220225/assets/workers/carousel.worker.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cachedInstance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "dist/split-window220225/assets/workers/series.worker.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SeriesWorker",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/carousel/carousel-main/carousel-main-display/carousel-main-display.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/carousel/carousel-main/carousel-main-display/carousel-main-display.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/carousel/carousel-main/carousel-main-display/carousel-main-display.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarouselMainDisplayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/carousel/carousel-main/carousel-main.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/carousel/carousel-main/carousel-main.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/carousel/carousel-main/carousel-main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarouselMainComponent",
                "coveragePercent": 2,
                "coverageCount": "1/47",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/display-grid/display-grid-template.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisplayGridTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/display-grid/display-grid-template.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/display-grid/display-grid-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DisplayGridTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SplitMode_2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SplitMode_3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SplitMode_4",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/display-grid/display-grid.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/display-grid/display-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DisplayGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/display-grid/display-grid.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Tile",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/grid-directives/grid-template.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "GridTemplateDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/grid-directives/select-color.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SelectColorDirective",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/grid-menu/grid-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/grid-menu/grid-menu.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/grid-menu/grid-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/grid-template/grid-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/toolbar/toolbar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/toolbar/toolbar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ToolbarMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/grid/toolbar/toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithThumbnailList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 28,
                "coverageCount": "8/28",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/series/seires-list/series-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/series/seires-list/series-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SeriesList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/series/seires-list/series-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/series/seires-list/series-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SeriesListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/series/series-item.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SeriesItemService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/series/series-item/series-item.component.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initialize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/series/series-item/series-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/series/series-item/series-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initial_value",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/series/series-item/series-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SelectedSeries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/series/series-item/series-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/series/series-item/series-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SeriesItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/select-thumbnail/select-thumbnail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectThumbnailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initialize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initial_value",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SelectedItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/thumbnail-item/thumbnail-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThumbnailItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initialize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "images",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initial_value",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThumbnailList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThumbnailListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/thumbnail/thumbnail-list/thumbnail-list.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomVirtualScrollStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImageModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SeriesModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/data.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "data",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/carousel.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CarouselService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cashe-series.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CacheSeriesService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/image.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ImageService",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/services/split.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SplitService",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/XMLHttpComm.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "XMLHttpComm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/axiosComm.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "axiosCommData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/down-scale-image.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "downscaleImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/down-scale-image.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/spinner/spinner-handler.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpinnerHandlerService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/spinner/spinner-interceptor.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "SpinnerInterceptorService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/assets/workers/additional-loading.worker.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadingWorker",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/assets/workers/carousel.worker.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "checkIfImageCached",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/assets/workers/carousel.worker.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCarouselImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/assets/workers/carousel.worker.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sleep",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/assets/workers/carousel.worker.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_stop",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/assets/workers/carousel.worker.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cachedInstance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/assets/workers/series.worker.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SeriesWorker",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/angular-materials.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "materials",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectedGridTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetActiveSplit",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetCategoryList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetCurrentCategory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetCurrentSplitOperation",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetFocusedSplit",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetImageUrls",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetIsImageLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetIsSeriesLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetSelectedImageById",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetSelectedImageByUrl",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetSelectedSeriesById",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetSelectedSplitWindowId",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetSeriesUrls",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetSplitAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetSplitCategory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetSplitMode",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetWebworkerWorkingStatus",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StatusAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatusState",
                "coveragePercent": 0,
                "coverageCount": "0/39",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectedGridTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/state/status/status.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StatusStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "storybook-static/assets/workers/additional-loading.worker.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadingWorker",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "storybook-static/assets/workers/carousel.worker.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "checkIfImageCached",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "storybook-static/assets/workers/carousel.worker.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCarouselImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "storybook-static/assets/workers/carousel.worker.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sleep",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "storybook-static/assets/workers/carousel.worker.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_stop",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "storybook-static/assets/workers/carousel.worker.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cachedInstance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "storybook-static/assets/workers/series.worker.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SeriesWorker",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}